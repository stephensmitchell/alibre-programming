{"Alibre-Script-Code-Assistant/001":{"slug":"Alibre-Script-Code-Assistant/001","filePath":"Alibre-Script-Code-Assistant/001.md","title":"001","links":[],"tags":[],"content":"from AlibreScript import *\ndef create_base_plate_with_holes():\n    # Initialize a part session\n    part = CurrentPart()\n    # Define dimensions for the base plate and holes\n    plate_length = 100.0  # Length of the base plate\n    plate_width = 50.0    # Width of the base plate\n    plate_thickness = 5.0 # Thickness of the base plate\n    hole_diameter = 5.0   # Diameter of the holes\n    hole_offset = 10.0    # Offset of the holes from the edges\n    # Create a base plate\n    base_sketch = part.AddSketch(&#039;BasePlateSketch&#039;, part.XYPlane)\n    base_sketch.AddRectangle(-plate_width / 2, -plate_length / 2, plate_width / 2, plate_length / 2, False)\n    part.AddExtrudeBoss(&#039;BasePlate&#039;, base_sketch, plate_thickness, False, part.EndCondition.ToDepth, None, 0, part.DirectionType.Normal, None, 0, False)\n    # Create holes\n    for x in [-plate_width / 2 + hole_offset, plate_width / 2 - hole_offset]:\n        for y in [-plate_length / 2 + hole_offset, plate_length / 2 - hole_offset]:\n            hole_sketch = part.AddSketch(&#039;HoleSketch&#039;, part.XYPlane)\n            hole_sketch.AddCircle(x, y, hole_diameter / 2, False)\n            part.AddExtrudeCut(&#039;ThroughHole&#039;, hole_sketch, 0, False, part.EndCondition.ThroughAll, None, 0, part.DirectionType.Normal, None, 0, False)\n    # Save the part\n    #part.Save()\n# Run the function to create a simple base plate with four holes\ncreate_base_plate_with_holes()"},"Alibre-Script-Code-Assistant/002":{"slug":"Alibre-Script-Code-Assistant/002","filePath":"Alibre-Script-Code-Assistant/002.md","title":"002","links":[],"tags":[],"content":"from AlibreScript import *\nimport math\n# Function to add a hole\ndef add_hole(sketch, x, y, diameter):\n    # Create a circle for the hole\n    sketch.AddCircle(x, y, diameter / 2, False)\n# Main Script\ndef main():\n    # Create a new part\n    part = CurrentPart()\n    # Add a sketch for the circular plate\n    sketch = part.AddSketch(&quot;PlateSketch&quot;, part.XYPlane)\n    # Draw the main circle (plate) - 20 inch diameter\n    plate_diameter = 20\n    sketch.AddCircle(0, 0, plate_diameter / 2, False)\n    # Hole dimensions\n    hole_diameter = 2\n    offset_distance = 2\n    # Calculate hole positions and add holes\n    # Assuming the holes are equally spaced around the plate\n    for i in range(4):\n        angle = math.radians(90 * i)\n        x = offset_distance * math.cos(angle)\n        y = offset_distance * math.sin(angle)\n        add_hole(sketch, x, y, hole_diameter)\n    # Extrude the sketch to create the plate - Assuming 0.25 inch thickness\n    thickness = 0.25\n    part.AddExtrudeBoss(&quot;Plate&quot;, sketch, thickness, False)\n    # Save the part\n    #part.SaveAs(&quot;/path/to/save/location&quot;, &quot;CircularPlate&quot;)\nmain()"},"Alibre-Script-Code-Assistant/003":{"slug":"Alibre-Script-Code-Assistant/003","filePath":"Alibre-Script-Code-Assistant/003.md","title":"003","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Define the dimensions of the bolt\nhex_head_diameter = 10  # Diameter of the hex head\nhex_head_height = 5     # Height of the hex head\nshaft_diameter = 5      # Diameter of the shaft\nshaft_length = 20       # Length of the shaft\n# Create a hexagon sketch for the bolt head\nhex_sketch = part.AddSketch(&quot;HexHeadSketch&quot;, part.XYPlane)\nfor i in range(6):\n    angle1 = math.radians(60 * i)\n    angle2 = math.radians(60 * (i + 1))\n    x1 = hex_head_diameter / 2 * math.cos(angle1)\n    y1 = hex_head_diameter / 2 * math.sin(angle1)\n    x2 = hex_head_diameter / 2 * math.cos(angle2)\n    y2 = hex_head_diameter / 2 * math.sin(angle2)\n    hex_sketch.AddLine([x1, y1], [x2, y2], False)\n# Extrude the hex head\nhex_head = part.AddExtrudeBoss(&quot;HexHead&quot;, hex_sketch, hex_head_height, False)\n# Create a circle sketch for the shaft\nshaft_sketch = part.AddSketch(&quot;ShaftSketch&quot;, part.XYPlane)\nshaft_sketch.AddCircle(0, 0, shaft_diameter / 2, False)\n# Extrude the shaft\nshaft = part.AddExtrudeBoss(&quot;Shaft&quot;, shaft_sketch, shaft_length, False)\n# Regenerate the part to update the view\npart.Regenerate()"},"Alibre-Script-Code-Assistant/004":{"slug":"Alibre-Script-Code-Assistant/004","filePath":"Alibre-Script-Code-Assistant/004.md","title":"004","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Assuming you have a part with an edge to chamfer.\n# The edge can be obtained in various ways, depending on the context.\n# Here&#039;s a generic way to get an edge, replace this with your specific method.\nedges = part.GetEdges()\nedge_to_chamfer = edges[0]  # Assuming you want to chamfer the first edge in the list\n# Define chamfer parameters\ndistance1 = 1  # The first chamfer distance\ndistance2 = 1  # The second chamfer distance (for unequal chamfer, otherwise set same as distance1)\n# Add chamfer to the selected edge\npart.AddChamfer(&quot;ChamferName&quot;, edge_to_chamfer, distance1, distance2, False)\n# Regenerate the part to update the view\npart.Regenerate()"},"Alibre-Script-Code-Assistant/005":{"slug":"Alibre-Script-Code-Assistant/005","filePath":"Alibre-Script-Code-Assistant/005.md","title":"005","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Define the dimensions of the bolt\nhex_head_diameter = 10  # Diameter of the hex head\nhex_head_height = 5     # Height of the hex head\nshaft_diameter = 5      # Diameter of the shaft\nshaft_length = 20       # Length of the shaft\n# Create a hexagon sketch for the bolt head\nhex_sketch = part.AddSketch(&quot;HexHeadSketch&quot;, part.XYPlane)\nfor i in range(6):\n    angle1 = math.radians(60 * i)\n    angle2 = math.radians(60 * (i + 1))\n    x1 = hex_head_diameter / 2 * math.cos(angle1)\n    y1 = hex_head_diameter / 2 * math.sin(angle1)\n    x2 = hex_head_diameter / 2 * math.cos(angle2)\n    y2 = hex_head_diameter / 2 * math.sin(angle2)\n    hex_sketch.AddLine([x1, y1], [x2, y2], False)\n# Extrude the hex head\nhex_head = part.AddExtrudeBoss(&quot;HexHead&quot;, hex_sketch, hex_head_height, False)\n# Create a circle sketch for the shaft\nshaft_sketch = part.AddSketch(&quot;ShaftSketch&quot;, part.XYPlane)\nshaft_sketch.AddCircle(0, 0, shaft_diameter / 2, False)\n# Extrude the shaft\nshaft = part.AddExtrudeBoss(&quot;Shaft&quot;, shaft_sketch, shaft_length, False)\n# Regenerate the part to update the view\npart.Regenerate()"},"Alibre-Script-Code-Assistant/006":{"slug":"Alibre-Script-Code-Assistant/006","filePath":"Alibre-Script-Code-Assistant/006.md","title":"006","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Fetch the standard planes\nxy_plane = part.GetPlane(&quot;XY-Plane&quot;)\nzx_plane = part.GetPlane(&quot;ZX-Plane&quot;)\n# Create a profile sketch on the XY plane\nprofile_sketch = part.AddSketch(&quot;ProfileSketch&quot;, xy_plane)\n# Add a circle to the profile sketch as the sweep profile\nprofile_sketch.AddCircle(0, 0, 2, False)  # Center at (0,0), Radius = 2\n# Create a path sketch on the ZX plane\npath_sketch = part.AddSketch(&quot;PathSketch&quot;, zx_plane)\n# Add a line to the path sketch as the sweep path\npath_sketch.AddLine([0, 0], [10, 10], False)  # Line from (0,0) to (10,10)\n# Define parameters for the sweep boss\nis_rigid = False\nend_condition = part.EndCondition.EntirePath  # Using EntirePath as the end condition\nend_plane = None\nend_offset = 0\ndraft_angle = 0  # No draft angle\noutward_draft = False  # No outward draft\n# Add the sweep boss feature\npart.AddSweepBoss(&quot;SweepBossFeature&quot;, profile_sketch, path_sketch, is_rigid, end_condition, end_plane, end_offset, draft_angle, outward_draft)\n# Regenerate the part to update the view\npart.Regenerate()"},"Alibre-Script-Code-Assistant/007":{"slug":"Alibre-Script-Code-Assistant/007","filePath":"Alibre-Script-Code-Assistant/007.md","title":"007","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\npart = Part(&#039;a_new_sk&#039;)\nsketch3D = part.Add3DSketch(&#039;My3DSketch&#039;)\nif sketch3D is None:\n    raise Exception(&quot;Failed to create 3D sketch.&quot;)\nsketch3D.StartEditing()\n# Define start and end points of the line\nstartPoint = [0, 0, 0]  # Replace x1, y1, z1 with your start point coordinates\nendPoint = [10, 10, 10]    # Replace x2, y2, z2 with your end point coordinates\n# Add the line to the sketch\nsketch3D.AddLine(startPoint, endPoint)\nsketch3D.StopEditing()\nprint(&quot;Line added to 3D sketch successfully.&quot;)"},"Alibre-Script-Code-Assistant/008":{"slug":"Alibre-Script-Code-Assistant/008","filePath":"Alibre-Script-Code-Assistant/008.md","title":"008","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Flange dimensions (in mm)\nflangeDiameter = 565  # Flange outer diameter\nflangeThickness = 30   # Flange thickness\npipeDiameter = 254     # 10 inches converted to mm for pipe\nboltHoleDiameter = 40  # Bolt hole diameter\nboltCircleDiameter = 175  # Bolt circle diameter\nnumberOfBoltHoles = 12\n# Create main flange disc\nflangeSketch = part.AddSketch(&#039;FlangeBase&#039;, part.XYPlane)\nflangeSketch.StartEditing()\nflangeSketch.AddCircle(0, 0, flangeDiameter / 2, False)  # Center at (0,0)\nflangeSketch.StopEditing()\nflange = part.AddExtrudeBoss(&#039;FlangeDisc&#039;, flangeSketch, flangeThickness, False)\n# Create bolt holes\nfor i in range(numberOfBoltHoles):\n    angle = 2 * math.pi * i / numberOfBoltHoles\n    x = boltCircleDiameter / 2 * math.cos(angle)\n    y = boltCircleDiameter / 2 * math.sin(angle)\n    boltHoleSketch = part.AddSketch(&#039;BoltHole&#039;, part.XYPlane)\n    boltHoleSketch.StartEditing()\n    boltHoleSketch.AddCircle(x, y, boltHoleDiameter / 2, False)\n    boltHoleSketch.StopEditing()\n    part.AddExtrudeCut(&#039;BoltHoleCut&#039;, boltHoleSketch, flangeThickness, False)\n# Create center pipe hole\ncenterHoleSketch = part.AddSketch(&#039;CenterPipeHole&#039;, part.XYPlane)\ncenterHoleSketch.StartEditing()\ncenterHoleSketch.AddCircle(0, 0, pipeDiameter / 2, False)\ncenterHoleSketch.StopEditing()\npart.AddExtrudeCut(&#039;CenterHoleCut&#039;, centerHoleSketch, flangeThickness, False)\nprint(&quot;10-inch pipe flange model created.&quot;)"},"Alibre-Script-Code-Assistant/009":{"slug":"Alibre-Script-Code-Assistant/009","filePath":"Alibre-Script-Code-Assistant/009.md","title":"009","links":[],"tags":[],"content":"import math\nfrom AlibreScript import *\n# Initialize the part session\npart = CurrentPart()\n# Nut dimensions (in mm)\nthreadDiameter = 10  # M10 thread\npitch = 1.5          # Typical pitch for M10\nacrossFlats = 17     # Width across flats for M10\nthickness = 8        # Nut thickness for M10\ncornerRadius = 1     # Corner radius\n# Number of sides for the hexagon\nnumSides = 6\n# Create the base hexagonal profile\nhexSketch = part.AddSketch(&#039;HexBase&#039;, part.XYPlane)\nhexSketch.StartEditing()\n# Calculate vertices for the hexagon\nvertices = []\nfor i in range(numSides + 1):  # +1 to close the hexagon\n    angle = 2 * math.pi * i / numSides\n    x = acrossFlats / (2 * math.cos(math.pi / numSides)) * math.cos(angle)\n    y = acrossFlats / (2 * math.cos(math.pi / numSides)) * math.sin(angle)\n    vertices.append([x, y])\n# Add lines to create the hexagon\nfor i in range(numSides):\n    startX, startY = vertices[i]\n    endX, endY = vertices[i + 1]\n    hexSketch.AddLine(startX, startY, endX, endY, False)  # Adding line using coordinates\nhexSketch.StopEditing()\n# Extrude the hexagon to form the nut body\nnutBody = part.AddExtrudeBoss(&#039;NutBody&#039;, hexSketch, thickness, False)\n# Create internal thread hole\nthreadHoleSketch = part.AddSketch(&#039;ThreadHole&#039;, part.XYPlane)\nthreadHoleSketch.StartEditing()\nthreadHoleSketch.AddCircle(0, 0, threadDiameter / 2, False)\nthreadHoleSketch.StopEditing()\npart.AddExtrudeCut(&#039;ThreadHoleCut&#039;, threadHoleSketch, thickness, False)\nprint(&quot;M10 hex nut model created.&quot;)"},"Alibre-Script-Code-Assistant/010":{"slug":"Alibre-Script-Code-Assistant/010","filePath":"Alibre-Script-Code-Assistant/010.md","title":"010","links":[],"tags":[],"content":"import sys\nimport math\nWin = Windows()\nOptions = []\nOptions.append([&#039;Radius&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Pitch&#039;, WindowsInputTypes.Real, 5.0])\nOptions.append([&#039;Turns&#039;, WindowsInputTypes.Integer, 10])\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.1])\nValues = Win.OptionsDialog(&#039;Helix Parameters&#039;, Options)\nif Values == None:\n    sys.exit(&#039;User cancelled&#039;)\nRadius = Values[0]\nPitch = Values[1]\nTurns = Values[2]\nAngleIncrement = Values[3]\nprint(&#039;Radius = %f&#039; % Radius)\nprint(&#039;Pitch = %f&#039; % Pitch)\nprint(&#039;Turns = %d&#039; % Turns)\nprint(&#039;Angle Increment = %f&#039; % AngleIncrement)\nPoints = []\nAngle = 0.0\nHeightIncrement = Pitch / (2 * math.pi / AngleIncrement)\nfor Pass in range(int(Turns * (2 * math.pi / AngleIncrement))):\n    X = Radius * math.cos(Angle)\n    Y = Radius * math.sin(Angle)\n    Z = Pass * HeightIncrement\n    Points.extend([X, Y, Z])\n    Angle += AngleIncrement\nHelix = CurrentPart()\nPath = Helix.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(Points)"},"Alibre-Script-Code-Assistant/011":{"slug":"Alibre-Script-Code-Assistant/011","filePath":"Alibre-Script-Code-Assistant/011.md","title":"011","links":[],"tags":[],"content":"import sys\nimport math\nWin = Windows()\nOptions = []\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.05])\nOptions.append([&#039;Radius&#039;, WindowsInputTypes.Real, 1.0])\nOptions.append([&#039;Height Increment&#039;, WindowsInputTypes.Real, 0.1])\nOptions.append([&#039;Turns&#039;, WindowsInputTypes.Integer, 20])\nValues = Win.OptionsDialog(&#039;Helix Parameters&#039;, Options)\nif Values is None:\n  sys.exit(&#039;User cancelled&#039;)\nAngleIncrement = Values[0]\nRadius = Values[1]\nHeightIncrement = Values[2]\nTurns = Values[3]\nprint(&#039;Angle Increment = %f&#039; % AngleIncrement)\nprint(&#039;Radius = %f&#039; % Radius)\nprint(&#039;Height Increment = %f&#039; % HeightIncrement)\nprint(&#039;Turns = %d&#039; % Turns)\nPoints = []\nAngle = 0.0\nHeight = 0.0\nTotalAngle = 2 * math.pi * Turns\nwhile Angle &lt;= TotalAngle:\n    X = Radius * math.cos(Angle)\n    Y = Radius * math.sin(Angle)\n    Z = Height\n    Points.extend([X, Y, Z])\n    Angle += AngleIncrement\n    Height += HeightIncrement\nHelixPart = Part(&#039;Helix&#039;)\nPath = HelixPart.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(Points)"},"Alibre-Script-Code-Assistant/012":{"slug":"Alibre-Script-Code-Assistant/012","filePath":"Alibre-Script-Code-Assistant/012.md","title":"012","links":[],"tags":[],"content":"import sys\nimport math\nWin = Windows()\nOptions = []\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.05])\nOptions.append([&#039;Radius&#039;, WindowsInputTypes.Real, 1.0])\nOptions.append([&#039;Height Increment&#039;, WindowsInputTypes.Real, 0.1])\nOptions.append([&#039;Turns&#039;, WindowsInputTypes.Integer, 20])\nValues = Win.OptionsDialog(&#039;Helix Parameters&#039;, Options)\nif Values is None:\n  sys.exit(&#039;User cancelled&#039;)\nAngleIncrement = Values[0]\nRadius = Values[1]\nHeightIncrement = Values[2]\nTurns = Values[3]\nPoints = []\nAngle = 0.0\nHeight = 0.0\nTotalAngle = 2 * math.pi * Turns\nwhile Angle &lt;= TotalAngle:\n    X = Radius * math.cos(Angle)\n    Y = Radius * math.sin(Angle)\n    Z = Height\n    Points.extend([X, Y, Z])\n    Angle += AngleIncrement\n    Height += HeightIncrement * AngleIncrement / (2 * math.pi) \nHelixPart = Part(&#039;Helix&#039;)\nPath = HelixPart.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(Points)"},"Alibre-Script-Code-Assistant/013":{"slug":"Alibre-Script-Code-Assistant/013","filePath":"Alibre-Script-Code-Assistant/013.md","title":"013","links":[],"tags":[],"content":"import sys\nimport math\n# Assuming Windows, WindowsInputTypes, and CurrentPart are predefined in your environment\nWin = Windows()\nOptions = []\nOptions.append([&#039;Radius&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Pitch&#039;, WindowsInputTypes.Real, 5.0])\nOptions.append([&#039;Total Turns&#039;, WindowsInputTypes.Integer, 10])\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.1])\nOptions.append([&#039;Segment Angle&#039;, WindowsInputTypes.Integer, 30])  # Option for segment angle\nValues = Win.OptionsDialog(&#039;Helix Parameters&#039;, Options)\nif Values is None:\n    sys.exit(&#039;User cancelled&#039;)\nRadius = Values[0]\nPitch = Values[1]\nTotalTurns = Values[2]\nAngleIncrement = Values[3]\nSegmentAngle = Values[4]  # Angle for each segment\nprint(&#039;Radius = %f&#039; % Radius)\nprint(&#039;Pitch = %f&#039; % Pitch)\nprint(&#039;Total Turns = %d&#039; % TotalTurns)\nprint(&#039;Angle Increment = %f&#039; % AngleIncrement)\nprint(&#039;Segment Angle = %d&#039; % SegmentAngle)\n# Calculate the total number of segments based on total turns and segment angle\nSegments = int((TotalTurns * 360) / SegmentAngle)\nfor Segment in range(Segments):\n    Points = []\n    # Calculate the start and end angles for the current segment in radians\n    StartAngle = Segment * SegmentAngle * (math.pi / 180.0)\n    EndAngle = StartAngle + (SegmentAngle * (math.pi / 180.0))\n    # Adjust the starting Z coordinate based on the segment&#039;s position in the overall helix\n    StartZ = Pitch * (StartAngle / (2 * math.pi))\n    Angle = StartAngle\n    while Angle &lt; EndAngle:\n        X = Radius * math.cos(Angle)\n        Y = Radius * math.sin(Angle)\n        # Calculate Z using the adjusted start Z for the segment and the angle&#039;s progression\n        Z = StartZ + Pitch * ((Angle - StartAngle) / (2 * math.pi))\n        Points.extend([X, Y, Z])\n        Angle += AngleIncrement * (math.pi / 180.0)  # Convert angle increment to radians for consistent progression\n    # Assuming CurrentPart() and Add3DSketch are part of your CAD API\n    Helix = CurrentPart()\n    PathName = &#039;Path_Segment_%d&#039; % (Segment + 1)\n    Path = Helix.Add3DSketch(PathName)\n    Path.AddBspline(Points)"},"Alibre-Script-Code-Assistant/014":{"slug":"Alibre-Script-Code-Assistant/014","filePath":"Alibre-Script-Code-Assistant/014.md","title":"014","links":[],"tags":[],"content":"import math\nfrom math import pi, sin, cos, radians\n# Prompt user for blade parameters\nWin = Windows()\nOptions = []\nOptions.append([&#039;Number of Blades&#039;, WindowsInputTypes.Integer, 3])\nOptions.append([&#039;Radius Start (mm)&#039;, WindowsInputTypes.Real, 100.0])\nOptions.append([&#039;Radius End (mm)&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Blade Height Increment (mm)&#039;, WindowsInputTypes.Real, 50])\nOptions.append([&#039;Points per Blade&#039;, WindowsInputTypes.Integer, 200])\n# Display the dialog and get values\nValues = Win.OptionsDialog(&#039;Fibonacci Propeller Blade Generator&#039;, Options)\nif Values is None:\n    sys.exit(&quot;Operation canceled by the user.&quot;)\n# Extract the values\nnum_blades = Values[0]\nradius_start = Values[1]\nradius_end = Values[2]\nheight_increment = Values[3]\npoints_per_blade = Values[4]\n# Constants\ngolden_angle = radians(137.5)  # Golden angle in radians\nradius_step = (radius_end - radius_start) / points_per_blade\nPropellerPart = CurrentPart()\n# Loop through each blade\nfor blade in range(num_blades):\n    angle_offset = golden_angle * blade  # Offset each blade by the golden angle\n    Points = []\n    # Generate points for the blade\n    for i in range(points_per_blade + 1):\n        angle = i * (2 * pi / points_per_blade) + angle_offset\n        radius = radius_start + i * radius_step\n        x = radius * cos(angle)\n        y = radius * sin(angle)\n        z = i * (height_increment / points_per_blade)\n        Points.extend([x, y, z])\n    # Add the blade spline to the 3D sketch\n    BladeSketch = PropellerPart.Add3DSketch(&#039;Blade_&#039; + str(blade + 1))\n    BladeSketch.AddBspline(Points)\nWin.InfoDialog(&#039;Done.&#039;,&quot;Fibonacci Propeller Blade Generator&quot;)"},"AlibreX-examples/placeholder":{"slug":"AlibreX-examples/placeholder","filePath":"AlibreX-examples/placeholder.md","title":"placeholder","links":[],"tags":[],"content":""},"alibre-script-examples/Assembly-Constraints":{"slug":"alibre-script-examples/Assembly-Constraints","filePath":"alibre-script-examples/Assembly-Constraints.md","title":"Assembly-Constraints","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/assembly-constraints\n# create a new empty assembly\nAsm = Assembly(&quot;Test&quot;);\n# add a part at the origin, replace path with your own\nNewPart1 = Asm.AddPart(r&#039;C:\\Users\\&lt;username&gt;\\Desktop\\PartA.AD_PRT&#039;, 0, 0, 0)\n# duplicate the part\nNewPart2 = Asm.DuplicatePart(NewPart1.Name, 0, 0, 0)\n# anchor the original copy\nAsm.AnchorPart(NewPart1.Name);\n# at a mate constraint, separating the XY-planes of the two parts by 0mm\nAsm.AddMateConstraint(0, NewPart1, NewPart1.GetPlane(&quot;XY-Plane&quot;), NewPart2, NewPart2.GetPlane(&quot;XY-Plane&quot;))\n# add an alignment constraint, separating the parts by 0mm\nAsm.AddAlignConstraint(0, NewPart1, NewPart1.GetPlane(&quot;YZ-Plane&quot;), NewPart2, NewPart2.GetPlane(&quot;YZ-Plane&quot;))"},"alibre-script-examples/Bolt-Creator":{"slug":"alibre-script-examples/Bolt-Creator","filePath":"alibre-script-examples/Bolt-Creator.md","title":"Bolt-Creator","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/bolt-creator\nMyPart = Part(&#039;My Part&#039;)\nXYPlane = MyPart.GetPlane(&#039;XY-Plane&#039;)\nHeadSketch = MyPart.AddSketch(&#039;Head&#039;, XYPlane)\nHeadSketch.AddCircle(0, 0, 10, False)\nBoltHead = MyPart.AddExtrudeBoss(&#039;Bolt Head&#039;, HeadSketch, 5, False)\nHeadBottomPlane = MyPart.AddPlane(&#039;Head Bottom&#039;, XYPlane, 5)\nShoulderSketch = MyPart.AddSketch(&#039;Shoulder&#039;, HeadBottomPlane)\nShoulderSketch.AddCircle(0, 0, 5, False)\nBoltShoulder = MyPart.AddExtrudeBoss(&#039;Bolt Shoulder&#039;, ShoulderSketch, 20, False)\nHexSketch = MyPart.AddSketch(&#039;Hex&#039;, XYPlane)\nHexSketch.AddPolygon(0, 0, 5, 6, False)\nHexRecess = MyPart.AddExtrudeCut(&#039;Hex Recess&#039;, HexSketch, 3, False)\n# save and export, replace paths with your own\n#Remove the &quot;#&quot; from the lines below to make them active\n#MyPart.Save(&#039;C:\\Users\\YourUserName\\Desktop&#039;)\n#MyPart.ExportSTL(&#039;C:\\Users\\YourUserName\\Desktop\\My Part.stl&#039;)\n#MyPart.Close()"},"alibre-script-examples/Calculating-Length-of-Curves":{"slug":"alibre-script-examples/Calculating-Length-of-Curves","filePath":"alibre-script-examples/Calculating-Length-of-Curves.md","title":"Calculating-Length-of-Curves","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/calculating-length-of-curves\nimport sympy\nfrom sympy import *\nx = Symbol(&#039;x&#039;)\nformula = 2 * x**2\nx_minimum = 5.0\nx_maximum = 10.0\nd = diff(formula, x)\ni = integrate(sqrt(1 + d**2), (x, x_minimum, x_maximum))\nlength = i.evalf()\nprint &#039;Length of curve over x=%.3f to x=%.3f is %.3f mm&#039; % (x_minimum, x_maximum, length)"},"alibre-script-examples/Cap-Screw-ISO-4762-Bolts":{"slug":"alibre-script-examples/Cap-Screw-ISO-4762-Bolts","filePath":"alibre-script-examples/Cap-Screw-ISO-4762-Bolts.md","title":"Cap-Screw-ISO-4762-Bolts","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/cap-screw-iso-4762-bolts\n# Creates a metric socket cap screw using ISO 4762\n# See: practicalmaintenance.wordpress.com/2009/01/30/socket-head-cap-screws-article-13/\n# Size of screw\nDiameter = 3.0\nLength = 30.0\n# Measurements table containing H, F, E, T, C from web page\nMetricData = {}\nMetricData[1.6]  = [3.14,  2.0,  1.73,  0.7, 0.16]\nMetricData[2.0]  = [3.98,  2.6,  1.73,  1.0, 0.2]\nMetricData[2.5]  = [4.68,  3.1,  2.3,   1.1, 0.25]\nMetricData[3.0]  = [5.68,  3.6,  2.87,  1.3, 0.3]\nMetricData[4.0]  = [7.22,  4.7,  3.44,  2.0, 0.4]\nMetricData[5.0]  = [8.72,  5.7,  4.58,  2.5, 0.5]\nMetricData[6.0]  = [10.22, 6.8,  5.72,  3.0, 0.6]\nMetricData[8.0]  = [13.27, 9.2,  6.86,  4.0, 0.8]\nMetricData[10.0] = [16.27, 11.2, 9.15,  5.0, 1.0]\nMetricData[12.0] = [18.27, 13.7, 11.43, 6.0, 1.2]\nMetricData[16.0] = [24.33, 17.7, 16.0,  8.0, 1.6]\nMetricData[20.0] = [30.33, 22.4, 19.44, 10.0, 2.0]\nMetricData[24.0] = [36.39, 26.4, 21.73, 12.0, 2.4]\nMetricData[30.0] = [45.39, 33.4, 25.15, 15.5, 3.0]\nMetricData[36.0] = [54.46, 39.4, 30.85, 19.0, 3.6]\nMetricData[42.0] = [63.46, 45.6, 36.57, 24.0, 4.2]\nMetricData[48.0] = [72.46, 52.6, 41.13, 28.0, 4.8]\nMetricData[56.0] = [84.54, 63.0, 46.83, 34.0, 5.6]\nMetricData[64.0] = [96.54, 71.0, 52.53, 38.0, 6.4]\nCapDiameter = MetricData[Diameter][0]\nFilletTransitionDiameter = MetricData[Diameter][1]\nHexHoleDiameter = MetricData[Diameter][2]\nHexHoleDepth = MetricData[Diameter][3]\nRimFilletRadius = MetricData[Diameter][4]\n# all values are in millimeters\nUnits.Current = UnitTypes.Millimeters\n# Create part\nScrew = Part(&#039;Cap Screw M%dx%d&#039; % (Diameter, Length))\n# body\nProfile = Screw.AddSketch(&#039;Profile&#039;, Screw.GetPlane(&#039;XY-Plane&#039;))\nLine = Polyline()\nLine.AddPoint(PolylinePoint(0, 0))\nLine.AddPoint(PolylinePoint(0, CapDiameter / 2))\nLine.AddPoint(PolylinePoint(Diameter, CapDiameter / 2))\nLine.AddPoint(PolylinePoint(Diameter, Diameter / 2))\nLine.AddPoint(PolylinePoint(Diameter + Length, Diameter / 2))\nLine.AddPoint(PolylinePoint(Diameter + Length, 0))\nLine.AddPoint(PolylinePoint(0, 0))\nProfile.AddPolyline(Line, False)\nScrew.AddRevolveBoss(&#039;Body&#039;, Profile, Screw.GetAxis(&#039;X-Axis&#039;), 360)\n# hex hole\nHexHole = Screw.AddSketch(&#039;Hole&#039;, Screw.GetFace(&#039;Face&lt;5&gt;&#039;))\nHexHole.AddPolygon(0, 0, HexHoleDiameter, 6, False)\nScrew.AddExtrudeCut(&#039;Hex Hole&#039;, HexHole, HexHoleDepth + ((FilletTransitionDiameter - Diameter) / 2.0), True)\n# fillet from cap to shaft\nScrew.AddFillet(&#039;Cap Joint&#039;, Screw.GetEdge(&#039;Edge&lt;21&gt;&#039;), (FilletTransitionDiameter - Diameter) / 2.0, False)\n# fillet at bottom of hex hole\nScrew.AddFillet(&#039;Hex Hole Bottom&#039;, [Screw.GetEdge(&#039;Edge&lt;5&gt;&#039;), Screw.GetEdge(&#039;Edge&lt;9&gt;&#039;), Screw.GetEdge(&#039;Edge&lt;12&gt;&#039;), Screw.GetEdge(&#039;Edge&lt;21&gt;&#039;), Screw.GetEdge(&#039;Edge&lt;18&gt;&#039;), Screw.GetEdge(&#039;Edge&lt;15&gt;&#039;)], (FilletTransitionDiameter - Diameter) / 2.0, False)\n# fillet on rim\nScrew.AddFillet(&#039;Cap Rim&#039;, Screw.GetEdge(&#039;Edge&lt;35&gt;&#039;), RimFilletRadius, False)"},"alibre-script-examples/Copy-sketch":{"slug":"alibre-script-examples/Copy-sketch","filePath":"alibre-script-examples/Copy-sketch.md","title":"Copy-sketch","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/copy-sketch\nMyPart = Part(&#039;MyPart&#039;)\nSketch1 = MyPart.AddSketch(&#039;Sketch1&#039;, MyPart.GetPlane(&#039;XY-Plane&#039;))\nSketch1.AddLines([0, 10, 0, 0, 10, 0, 10, 10], False)\nSketch1.AddArcCenterStartAngle(5, 10, 10, 10, 180, False)\nSketch2 = MyPart.AddSketch(&#039;Sketch2&#039;, MyPart.GetPlane(&#039;YZ-Plane&#039;))\nSketch2.CopyFrom(Sketch1)"},"alibre-script-examples/Create-Reference-Planes-Axes-and-Points":{"slug":"alibre-script-examples/Create-Reference-Planes-Axes-and-Points","filePath":"alibre-script-examples/Create-Reference-Planes-Axes-and-Points.md","title":"Create-Reference-Planes-Axes-and-Points","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/create-reference-planes-axes-and-points\n# demonstrates creating reference geometry\n# create a new part and get the xy plane\nMyPart = Part(&#039;My Part&#039;)\nXYPlane = MyPart.GetPlane(&#039;XY-Plane&#039;)\n# create planes 100mm above and below the xy plane\nTopPlane = MyPart.AddPlane(&#039;Top Plane&#039;, XYPlane, 100.0)\nBottomPlane = MyPart.AddPlane(&#039;Bottom Plane&#039;, XYPlane, -100.0)\n# add reference points to bottom plane\nRef1 = MyPart.AddPoint(&#039;Ref 1&#039;, 50.0, 50.0, -100.0)\nRef2 = MyPart.AddPoint(&#039;Ref 2&#039;, 50.0, -50.0, -100.0)\nRef3 = MyPart.AddPoint(&#039;Ref 3&#039;, -50.0, -50.0, -100.0)\nRef4 = MyPart.AddPoint(&#039;Ref 4&#039;, -50.0, 50.0, -100.0)\n# add reference axes from points on bottom plane to center of top plane\nAxis1 = MyPart.AddAxis(&#039;Axis 1&#039;, [50.0, 50.0, -100.0], [0.0, 0.0, 100.0])\nAxis2 = MyPart.AddAxis(&#039;Axis 2&#039;, [50.0, -50.0, -100.0], [0.0, 0.0, 100.0])\nAxis3 = MyPart.AddAxis(&#039;Axis 3&#039;, [-50.0, -50.0, -100.0], [0.0, 0.0, 100.0])\nAxis4 = MyPart.AddAxis(&#039;Axis 4&#039;, [-50.0, 50.0, -100.0], [0.0, 0.0, 100.0])"},"alibre-script-examples/Create-and-Modify-Global-Parameters":{"slug":"alibre-script-examples/Create-and-Modify-Global-Parameters","filePath":"alibre-script-examples/Create-and-Modify-Global-Parameters.md","title":"Create-and-Modify-Global-Parameters","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/create-and-modify-global-parameters\n# create a new global parameters set\nParams = GlobalParameters(&#039;Test&#039;)\n# add a distance parameter in millimeters\nParams.AddParameter(&#039;Width&#039;, ParameterTypes.Distance, 4.56)\n# save and close, replace with your own path\nParams.Save(r&#039;C:\\Users\\&lt;username&gt;\\Downloads\\temp&#039;)\nParams.Close()\n# open global parameters, replace with your own path\nParams2 = GlobalParameters(r&#039;C:\\Users\\&lt;username&gt;\\Downloads\\temp&#039;, &#039;Test&#039;)\n# get access to a parameter and display the current value\nWidth = Params2.GetParameter(&#039;Width&#039;)\nprint Width.Value\n# change the value of the parameter\nWidth.Value = 12.34"},"alibre-script-examples/Creating-a-3D-Sketch-with-a-Spline-and-an-Arc":{"slug":"alibre-script-examples/Creating-a-3D-Sketch-with-a-Spline-and-an-Arc","filePath":"alibre-script-examples/Creating-a-3D-Sketch-with-a-Spline-and-an-Arc.md","title":"Creating-a-3D-Sketch-with-a-Spline-and-an-Arc","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/creating-a-3d-sketch-with-a-spline-and-an-arc\nUnits.Current = UnitTypes.Inches\nP = Part(&#039;My Part&#039;)\n# create 3d spline from a set of interpolation points\nPath = P.Add3DSketch(&#039;Path&#039;)\nPoints = [0.6, -0.6625, 0.0]\nPoints.extend([0.6, -0.6625, -0.2175])\nPoints.extend([0.6, -0.8125, -0.6795])\nPath.AddBspline(Points)\n# arcs are counter clockwise, so to get a clockwise arc the start and end points are swapped\nPath.AddArcCenterStartEnd(-5.6634, -3.92, -0.6795, 0.6, -7.0275, -0.6795, 0.6, -0.8125, -0.6795)"},"alibre-script-examples/Creating-a-Cylinder-Between-Two-Points":{"slug":"alibre-script-examples/Creating-a-Cylinder-Between-Two-Points","filePath":"alibre-script-examples/Creating-a-Cylinder-Between-Two-Points.md","title":"Creating-a-Cylinder-Between-Two-Points","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/creating-a-cylinder-between-two-points\n# creates a cylinder between two arbitrary points\nfrom math import sqrt\n# ends of cylinder are centered on these points\ncyl_p1 = [1, 5, 2]\ncyl_p2 = [10, 14, 8]\n# diameter of cylinder\ndiameter = 6\n# get length of cynlinder using euclidean distance\nlength = sqrt((cyl_p2[0] - cyl_p1[0])**2 + (cyl_p2[1] - cyl_p1[1])**2 + (cyl_p2[2] - cyl_p1[2])**2)\n# calculate normal vector for the plane at the first end of the cylinder\nnormal_vector = [cyl_p2[0] - cyl_p1[0], cyl_p2[1] - cyl_p1[1], cyl_p2[2] - cyl_p1[2]]\n# create part\nP = Part(&#039;Cylinder&#039;)\n# create plane for one end of the cylinder\ncyl_plane = P.AddPlane(&#039;Cyl Start Plane&#039;, normal_vector, cyl_p1)\nP.AddAxis(&#039;Cylinder Axis&#039;, cyl_p1, cyl_p2)\n# draw a circle on the plane\nS = P.AddSketch(&#039;Cylinder End&#039;, cyl_plane)\n[cx, cy] = S.GlobaltoPoint(cyl_p1[0], cyl_p1[1], cyl_p1[2])\nS.AddCircle(cx, cy, diameter, False)\n# extrude into a cylinder\nP.AddExtrudeBoss(&#039;Cylinder&#039;, S, length, False)"},"alibre-script-examples/Creating-and-Manipulating-Assemblies":{"slug":"alibre-script-examples/Creating-and-Manipulating-Assemblies","filePath":"alibre-script-examples/Creating-and-Manipulating-Assemblies.md","title":"Creating-and-Manipulating-Assemblies","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/creating-and-manipulating-assemblies\n# create a new empty assembly\nAsm = Assembly(&quot;Test&quot;);\n# add an existing part, located at the origin, replace path with your own\nNewPart1 = Asm.AddPart(r&#039;C:\\Users\\Brian\\Desktop\\PartA.AD_PRT&#039;, 0, 0, 0, 0, 0, 0, True)\n# duplicate the part, translate it to x = 5, y = 10, z = 15 and rotate it x 30 deg, y 40 deg, z 50 deg\nNewPart2 = Asm.DuplicatePart(NewPart1, 5, 10, 15, 30, 40, 50, True)\n# duplicate the part, rotate it x 30 deg, y 40 deg, z 50 deg and translate it x = 5, y = 10, z = 15\nNewPart3 = Asm.DuplicatePart(NewPart1, 5, 10, 15, 30, 40, 50, False)\n# anchor the original part\nAsm.AnchorPart(NewPart1);\n# get the part (this is an &#039;assembled part&#039;)\nP = Asm.GetPart(NewPart1.Name)\n# show the faces on the part\nprint P.Faces"},"alibre-script-examples/Custom-Values-and-Settings-Window":{"slug":"alibre-script-examples/Custom-Values-and-Settings-Window","filePath":"alibre-script-examples/Custom-Values-and-Settings-Window.md","title":"Custom-Values-and-Settings-Window","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/custom-values-and-settings-window\n# create windows object\nWin = Windows()\n# construct list of items for the window\nOptions = []\n# ask user for text\nOptions.append([&#039;Name of the item&#039;, WindowsInputTypes.String, &#039;Baz&#039;])\n# ask user for a floating point (real) value\nOptions.append([&#039;Scale&#039;, WindowsInputTypes.Real, 1.234])\n# checkbox\nOptions.append([&#039;Enabled&#039;, WindowsInputTypes.Boolean, True])\n# ask user for an integer\nOptions.append([&#039;Count&#039;, WindowsInputTypes.Integer, 123456])\n# show window and output results\n# if user closes window or clicks on Cancel button then Values will be set to &#039;None&#039;\nValues = Win.OptionsDialog(&#039;Test&#039;, Options)\nprint Values"},"alibre-script-examples/Default-Reference-Geometry":{"slug":"alibre-script-examples/Default-Reference-Geometry","filePath":"alibre-script-examples/Default-Reference-Geometry.md","title":"Default-Reference-Geometry","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/default-reference-geometry\n# create a new part\nP = Part(&quot;Test&quot;)\n# access reference geometry\nprint P.XYPlane\nprint P.YZPlane\nprint P.ZXPlane\nprint P.XAxis\nprint P.YAxis\nprint P.ZAxis\nprint P.Origin"},"alibre-script-examples/Drop-Down-Lists":{"slug":"alibre-script-examples/Drop-Down-Lists","filePath":"alibre-script-examples/Drop-Down-Lists.md","title":"Drop-Down-Lists","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/drop-down-lists\nimport glob\nimport os\nimport re\n# default diameter to show\nDefaultDiameter = &#039;M6&#039;\n# called when an input changes in the dialog window\ndef InputChanged(Index, Value):\n  # size changed\n  if Index == 0:\n    Size = DiameterNames[Value]\n    print Size\n# called when user confirms selections\ndef SelectionMade(Values):\n  # get values\n  Size = DiameterNames[Values[0]]\n  print Size\n# get access to windows functionality\nWin = Windows()\n# list of diameters to choose from\nDiameterNames = [&#039;M6&#039;, &#039;M8&#039;, &#039;M10&#039;, &#039;M12&#039;]\n# create dialog window\nOptions = []\nOptions.append([&#039;Size&#039;, WindowsInputTypes.StringList, DiameterNames, DefaultDiameter])\n# show dialog window to user\nDialogWidth = 400\nWin.UtilityDialog(&#039;Test&#039;, &#039;Apply&#039;, SelectionMade, InputChanged, Options, DialogWidth)"},"alibre-script-examples/Everyone-Loves-a-Slinky":{"slug":"alibre-script-examples/Everyone-Loves-a-Slinky","filePath":"alibre-script-examples/Everyone-Loves-a-Slinky.md","title":"Everyone-Loves-a-Slinky","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/everyone-loves-a-slinky\n# Everyone Loves a Slinky\n# Adapted from:\n# forum.alibre.com/viewtopic.php#p30750\nimport sys\nimport math\n# create dialog window\nWin = Windows()\nOptions = []\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.05])\nOptions.append([&#039;Loop Scale&#039;, WindowsInputTypes.Real, 0.8])\nOptions.append([&#039;Height Scale&#039;, WindowsInputTypes.Real, 1.0])\nOptions.append([&#039;Major Helix Width Scale&#039;, WindowsInputTypes.Real, 2.0])\nOptions.append([&#039;Turn Density&#039;, WindowsInputTypes.Integer, 25])\n# show dialog window and get values\nValues = Win.OptionsDialog(&#039;Everyone Loves a Slinky&#039;, Options)\nif Values == None:\n  sys.exit(&#039;User cancelled&#039;)\nAngleIncrement = Values[0]\nLoopScale = Values[1]\nHeightScale = Values[2]\nWidthScale = Values[3]\nTurnDensity = Values[4]\nprint &#039;Angle Increment = %f&#039; % AngleIncrement\nprint &#039;Loop Scale = %f&#039; % LoopScale\nprint &#039;Height Scale = %f&#039; % HeightScale\nprint &#039;Width Scale = %f&#039; % WidthScale\nprint &#039;Turn Density = %d&#039; % TurnDensity\n# create list of points for 3d sketch\nPoints = []\nAngle = 0.0\nfor Pass in range(0, 437):\n  X = (WidthScale + LoopScale * math.cos(Angle * TurnDensity)) * math.cos(Angle)\n  Y = (WidthScale + LoopScale * math.cos(Angle * TurnDensity)) * math.sin(Angle)\n  Z = HeightScale * Angle + LoopScale * math.sin(Angle * TurnDensity)\n  Points.extend([X, Y, Z])\n  Angle += AngleIncrement\n# create part and add 3d sketch\nSlinky = Part(&#039;Slinky&#039;)\nPath = Slinky.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(Points)"},"alibre-script-examples/Gear-Example":{"slug":"alibre-script-examples/Gear-Example","filePath":"alibre-script-examples/Gear-Example.md","title":"Gear-Example","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/gear-example\nUnits.Current = UnitTypes.Millimeters\nPressureAngle = 20\nThickness = 3\nMercuryDiameter = 32\n# replace with your own path\nOutputFolder = &#039;C:\\Users\\username\\Desktop\\ScriptDir/&#039;\nSizeFile = open(OutputFolder + &#039;EarthGearSizes.txt&#039;, &#039;w&#039;)\ndef GenerateGear(Name, Teeth, DiametralPitch, Thickness, OutputFolder, SizeFile):\n  Gear = Part(Name)\n  Profile = Gear.AddGearDN(&#039;Profile&#039;, DiametralPitch, Teeth, PressureAngle, 0, 0, Gear.GetPlane(&#039;XY-Plane&#039;))\n  Gear.AddExtrudeBoss(&#039;Gear&#039;, Profile, Thickness, False)\n  print SizeFile, &#039;%s Pitch Diameter = %f&#039; % (Name, Profile.PitchDiameter)\n  Gear.Save(OutputFolder)\n  Gear.Close()\n# get diametral pitch\nGear = Part(&#039;MercuryPrimaryGear&#039;)\nProfile = Gear.AddGearNP(&#039;Profile&#039;, 16, MercuryDiameter, PressureAngle, 0, 0, Gear.GetPlane(&#039;XY-Plane&#039;))\nGear.Close()\nDiametralPitch = Profile.DiametralPitch\nprint &gt;&gt; SizeFile, &#039;Diametral Pitch = %f&#039; % DiametralPitch\nGenerateGear(&#039;EarthLargeGear&#039;, 80, DiametralPitch * 2, Thickness, OutputFolder, SizeFile)\nGenerateGear(&#039;Earth3Gear&#039;, 14, DiametralPitch * 2, Thickness, OutputFolder, SizeFile)\nGenerateGear(&#039;Earth4Gear&#039;, 14, DiametralPitch * 2, Thickness, OutputFolder, SizeFile)\n# Earth 1 and 2 gears\nGear = Part(&#039;Earth1-2Gear&#039;)\nProfile = Gear.AddGearDN(&#039;Profile&#039;, DiametralPitch * 2, 32, PressureAngle, 0, 0, Gear.GetPlane(&#039;XY-Plane&#039;))\nGear.AddExtrudeBoss(&#039;Gear&#039;, Profile, Thickness + 1, False)\nprint SizeFile, &#039;Earth1Gear Pitch Diameter = %f&#039; % Profile.PitchDiameter\nProfile2 = Gear.AddGearDN(&#039;Profile2&#039;, DiametralPitch * 2, 14, PressureAngle, 0, 0, Gear.GetFace(&#039;Face&lt;129&gt;&#039;))\nGear.AddExtrudeBoss(&#039;Gear&#039;, Profile2, Thickness, False)\nprint SizeFile, &#039;Earth2Gear Pitch Diameter = %f&#039; % Profile2.PitchDiameter\nGear.Save(OutputFolder)\nGear.Close()\nSizeFile.close()"},"alibre-script-examples/Geodesic-Dome-Reference-Geometry":{"slug":"alibre-script-examples/Geodesic-Dome-Reference-Geometry","filePath":"alibre-script-examples/Geodesic-Dome-Reference-Geometry.md","title":"Geodesic-Dome-Reference-Geometry","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/geodesic-dome-reference-geometry\n# tessellates a sphere into triangles and generates a reference point at each vertex\n# adapted from\n# musingsofninjarat.wordpress.com/spheres-through-triangle-tessellation/\nfrom math import *\nA = 0.525731112119133606\nB = 0.850650808352039932\nicosa_indices = [0 for x in xrange(20)]\nicosa_indices[0]  = [0,4,1]\nicosa_indices[1]  = [0,9,4]\nicosa_indices[2]  = [9,5,4]\nicosa_indices[3]  = [4,5,8]\nicosa_indices[4]  = [4,8,1]\nicosa_indices[5]  = [8,10,1]\nicosa_indices[6]  = [8,3,10]\nicosa_indices[7]  = [5,3,8]\nicosa_indices[8]  = [5,2,3]\nicosa_indices[9]  = [2,7,3]\nicosa_indices[10] = [7,10,3]\nicosa_indices[11] = [7,6,10]\nicosa_indices[12] = [7,11,6]\nicosa_indices[13] = [11,0,6]\nicosa_indices[14] = [0,1,6]\nicosa_indices[15] = [6,1,10]\nicosa_indices[16] = [9,0,11]\nicosa_indices[17] = [9,11,2]\nicosa_indices[18] = [9,2,5]\nicosa_indices[19] = [7,2,11]\nicosa_verts = [0 for x in xrange(12)]\nicosa_verts[0]  = [A,0.0,-B]\nicosa_verts[1]  = [-A,0.0,-B]\nicosa_verts[2]  = [A,0.0,B]\nicosa_verts[3]  = [-A,0.0,B]\nicosa_verts[4]  = [0.0,-B,-A]\nicosa_verts[5]  = [0.0,-B,A]\nicosa_verts[6]  = [0.0,B,-A]\nicosa_verts[7]  = [0.0,B,A]\nicosa_verts[8]  = [-B,-A,0.0]\nicosa_verts[9]  = [B,-A,0.0]\nicosa_verts[10] = [-B,A,0.0]\nicosa_verts[11] = [B,A,0.0]\ndef normalize_vert(a):\n  d = sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])\n  a[0] = a[0] / d\n  a[1] = a[1] / d\n  a[2] = a[2] / d\n  return a\ndef draw_recursive_tri(a, b, c, div, r, vertices):\n  if div == 0:\n    v1 = (a[0]*r, a[1]*r, a[2]*r)\n    v2 = (b[0]*r, b[1]*r, b[2]*r)\n    v3 = (c[0]*r, c[1]*r, c[2]*r)\n    vertices.add(v1)\n    vertices.add(v2)\n    vertices.add(v3)\n  else:\n    ab = [0, 0, 0]\n    ac = [0, 0, 0]\n    bc = [0, 0, 0]\n    for i in range(0, 3):\n      ab[i] = (a[i] + b[i]) / 2.0\n      ac[i] = (a[i] + c[i]) / 2.0\n      bc[i] = (b[i] + c[i]) / 2.0\n    ab = normalize_vert(ab)\n    ac = normalize_vert(ac)\n    bc = normalize_vert(bc)\n    draw_recursive_tri(a, ab, ac, div - 1, r, vertices)\n    draw_recursive_tri(b, bc, ab, div - 1, r, vertices)\n    draw_recursive_tri(c, ac, bc, div - 1, r, vertices)\n    draw_recursive_tri(ab, bc, ac, div - 1, r, vertices)\n# calculates the triangle vertices for a given sphere and level of detail\ndef calculate_sphere(detail, radius):\n  # we use a set because each vertex must be unique and sets can only contain unique values\n  vertices = set()\n  for i in range(0, 20):\n    draw_recursive_tri(icosa_verts[icosa_indices[i][0]], icosa_verts[icosa_indices[i][1]], icosa_verts[icosa_indices[i][2]], detail, radius, vertices);\n  return vertices\n# use a low level of detail - increasing this value drastically increases the number of triangles\n# warning - must be zero or a positive integer\nDetail = 1\n# radius of sphere in millimeters\nRadius = 10\n# generate a set of triangle vertices\nVertices = calculate_sphere(Detail, Radius)\n# create a new part\nMyPart = Part(&#039;Geodesic Sphere&#039;)\n# add the reference points to the part\nNumber = 0\nfor Vertex in Vertices:\n  MyPart.AddPoint(&#039;Geodesic &#039; + str(Number), Vertex[0], Vertex[1], Vertex[2])\n  Number = Number + 1"},"alibre-script-examples/Getting-User-Input":{"slug":"alibre-script-examples/Getting-User-Input","filePath":"alibre-script-examples/Getting-User-Input.md","title":"Getting-User-Input","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/getting-user-input\n# Demonstrates requesting values from the user then creating a part\n# with those values\nprint &#039;Input width in mm and press Enter&#039;\nWidth = float(Read())\nif Width &lt; 0.1:\n  sys.exit(&#039;Width must be at least 0.1 mm&#039;)\nprint &#039;Input height in mm and press Enter&#039;\nHeight = float(Read())\nif Height &lt; 0.1:\n  sys.exit(&#039;Height must be at least 0.1 mm&#039;)\nprint &#039;Input depth in mm and press Enter&#039;\nDepth = float(Read())\nif Depth &lt; 0.1:\n  sys.exit(&#039;Depth must be at least 0.1 mm&#039;)\nprint &#039;Creating a box measuring %f mm x %f mm x %f mm...&#039; % (Width, Height, Depth)\nMyPart = Part(&#039;My Part&#039;)\nProfile = MyPart.AddSketch(&#039;Profile&#039;, MyPart.GetPlane(&#039;XY-Plane&#039;))\nProfile.AddRectangle(0, 0, Width, Height, False)\nMyPart.AddExtrudeBoss(&#039;Box&#039;, Profile, Depth, False)"},"alibre-script-examples/Helical-spring":{"slug":"alibre-script-examples/Helical-spring","filePath":"alibre-script-examples/Helical-spring.md","title":"Helical-spring","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/helical-spring\nimport sys\nimport math\n# create dialog window\nWin = Windows()\nOptions = []\nOptions.append([&#039;Angle Increment&#039;, WindowsInputTypes.Real, 0.05])\nOptions.append([&#039;Loop Scale&#039;, WindowsInputTypes.Real, 0.8])\nOptions.append([&#039;Height Scale&#039;, WindowsInputTypes.Real, 1.0])\nOptions.append([&#039;Major Helix Width Scale&#039;, WindowsInputTypes.Real, 2.0])\nOptions.append([&#039;Turn Density&#039;, WindowsInputTypes.Integer, 25])\n# show dialog window and get values\nValues = Win.OptionsDialog(&#039;Everyone Loves a Slinky&#039;, Options)\nif Values == None:\n  sys.exit(&#039;User cancelled&#039;)\nAngleIncrement = Values[0]\nLoopScale = Values[1]\nHeightScale = Values[2]\nWidthScale = Values[3]\nTurnDensity = Values[4]\nprint &#039;Angle Increment = %f&#039; % AngleIncrement\nprint &#039;Loop Scale = %f&#039; % LoopScale\nprint &#039;Height Scale = %f&#039; % HeightScale\nprint &#039;Width Scale = %f&#039; % WidthScale\nprint &#039;Turn Density = %d&#039; % TurnDensity\n# create list of points for 3d sketch\nPoints = []\nAngle = 0.0\nfor Pass in range(0, 437):\n  X = (WidthScale + LoopScale * math.cos(Angle * TurnDensity)) * math.cos(Angle)\n  Y = (WidthScale + LoopScale * math.cos(Angle * TurnDensity)) * math.sin(Angle)\n  Z = HeightScale * Angle + LoopScale * math.sin(Angle * TurnDensity)\n  Points.extend([X, Y, Z])\n  Angle += AngleIncrement\n# create part and add 3d sketch\nSlinky = Part(&#039;Slinky&#039;)\nPath = Slinky.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(Points)"},"alibre-script-examples/Import-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline":{"slug":"alibre-script-examples/Import-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline","filePath":"alibre-script-examples/Import-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline.md","title":"Import-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/import-points-from-a-csv-file-rotate-them-and-connect-into-a-polyline\n# imports a set of 2D points from a csv file, rotates them and then\n# adds them to a 2D sketch with lines connecting the points\n# specify which libraries we are going to use\nimport csv\nimport math\n# configuration\nangle = 45\nrotationpoint = [15.0, 0.0]\n# file to import, replace with your own example\ncsvfile = r&#039;C:\\temp\\sample.csv&#039;\n# rotates a point around another point\n# passed is the angle, the point to rotate and the origin of the rotation\n# copied from ubuntuforums.org/showthread.php#post8618044\ndef rotate2d(degrees,point,origin):\n  x = point[0] - origin[0]\n  yorz = point[1] - origin[1]\n  newx = (x*math.cos(math.radians(degrees))) - (yorz*math.sin(math.radians(degrees)))\n  newyorz = (x*math.sin(math.radians(degrees))) + (yorz*math.cos(math.radians(degrees)))\n  newx += origin[0]\n  newyorz += origin[1] \n  return newx,newyorz\n# list of points, empty for now\n# points will be stored as [x1,y1, x2,y2, ... ,xn,yn]\npoints = []\n# open csv file\nf = open(csvfile)\n# create csv reader and read in lines\nreader = csv.reader(f)\nfor row in reader:\n  # column 0 contains x, column 1 contains y\n  x = float(row[0])\n  y = float(row[1])\n  # rotate point and add to list of points\n  points.extend(rotate2d(angle, [x, y], rotationpoint))\n# finished with csv file\nf.close()\n# show number of points found\nprint &#039;Found %d points&#039; % (len(points) / 2)\n# create part\nMyPart = Part(&#039;My Part&#039;)\n# add sketch on XY plane\nPointSketch = MyPart.AddSketch(&#039;Point Sketch&#039;, MyPart.GetPlane(&#039;XY-Plane&#039;))\n# add points with lines connecting them\nPointSketch.AddLines(points, False)"},"alibre-script-examples/Importing-Files":{"slug":"alibre-script-examples/Importing-Files","filePath":"alibre-script-examples/Importing-Files.md","title":"Importing-Files","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/importing-files\n# replace paths used with your own\n# import a step file\nMyPart1 = Part(r&#039;c:\\mycadfiles\\Corner.stp&#039;, Part.FileTypes.STEP)\n# import an IGES file\nMyPart3 = Part(r&#039;c:\\mycadfiles\\wave washer.igs&#039;, Part.FileTypes.IGES)"},"alibre-script-examples/Joint-Creator":{"slug":"alibre-script-examples/Joint-Creator","filePath":"alibre-script-examples/Joint-Creator.md","title":"Joint-Creator","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/joint-creator\n# Joint Creator\n# (c) Alibre, LLC 2019, All Rights Reserved\n# Version 1.00\nfrom __future__ import division\nfrom math import *\n# gets locaton of edge in a part coordinate system\n# returns a list of two points defining the edge\ndef GetPartEdge(Prt, SharedEdge):\n  Point1 = Prt.AssemblyPointtoPartPoint(SharedEdge[0])\n  Point2 = Prt.AssemblyPointtoPartPoint(SharedEdge[1])\n  return [Point1, Point2]\n# compares two points [X1, Y1, Z1] and [X2, Y2, Z2]\n# returns true if they are the same\ndef PointsAreEqual(P1, P2):\n  if (round(P1[0], 6) == round(P2[0], 6) and\n      round(P1[1], 6) == round(P2[1], 6) and\n      round(P1[2], 6) == round(P2[2], 6)):\n    return True\n  else:\n    return False\n# gets part faces that use an edge\n# returns a list of faces\ndef GetFacesFromEdge(Prt, SharedEdge):\n  Faces = []\n  PartEdge = GetPartEdge(Prt, SharedEdge)\n  for Fce in Prt.Faces:\n    for Edg in Fce.GetEdges():\n      EdgeVertices = Edg.GetVertices()\n      V1 = [EdgeVertices[0].X, EdgeVertices[0].Y, EdgeVertices[0].Z]\n      V2 = [EdgeVertices[1].X, EdgeVertices[1].Y, EdgeVertices[1].Z]\n      if ((PointsAreEqual(V1, PartEdge[0]) and PointsAreEqual(V2, PartEdge[1])) or\n          (PointsAreEqual(V2, PartEdge[0]) and PointsAreEqual(V1, PartEdge[1]))):\n         Faces.append(Fce)\n  return Faces\n# gets an edge that is shared between two parts\n# returns list of edge vertices\ndef GetSharedEdge(Prt1, Prt2):  \n  CornerVertices = []\n  for TabVert in Prt1.GetAssemblyVertices():\n    for BaseVert in Prt2.GetAssemblyVertices():\n      if PointsAreEqual(TabVert, BaseVert):\n        CornerVertices.append(TabVert)\n  return CornerVertices\n# gets the length of an edge\n# returns edge length\ndef GetEdgeLength(Vert1, Vert2):\n  a = abs(Vert2[0] - Vert1[0])\n  b = abs(Vert2[1] - Vert1[1])\n  c = abs(Vert2[2] - Vert1[2])\n  return sqrt(a * a + b * b + c * c)\n# gets the largest face from a set of faces\ndef GetLargestFace(Faces):\n  if Faces[0].GetArea() &gt; Faces[1].GetArea():\n    return Faces[0]\n  elif Faces[1].GetArea() &gt; Faces[0].GetArea():\n    return Faces[1]\n  else:\n    print &quot;Unable to determine face of part.&quot;\n    sys.exit()\n# gets the smallest face from a set of faces\ndef GetSmallestFace(Faces):\n  if Faces[0].GetArea() &lt; Faces[1].GetArea():\n    return Faces[0]\n  elif Faces[1].GetArea() &lt; Faces[0].GetArea():\n    return Faces[1]\n  else:\n    print &quot;Unable to determine face of part.&quot;\n    sys.exit()\n# generates a range of real values from start to stop\n# incremented by step\ndef frange(start, stop, step):\n  i = start\n  if start &lt; stop:\n    while i &lt; stop:\n      yield i\n      i += step\n  else:\n    while i &gt; stop:\n      yield i\n      i += step\n# gets the shortest edge of a face\n# returns shortest edge\ndef GetShortestEdge(Fce):\n  Shortest = Fce.GetEdges()[0]\n  for E in Fce.GetEdges():\n    if E.Length &lt; Shortest.Length:\n      Shortest = E\n  return Shortest\n# generates pin offsets\n# NumPins = number of pins\n# EdgeLength = length of edge for pins\n# PinSense = True = slot at edge, False = pin at edge\n# EdgeOffset = distance from ends of edges before pins\n# Gap = distance between slot and pin\n# returns: [ [Pin_1_Start, Pin_1_End], ..., [Pin_n_Start, Pin_n_End] ]\ndef GeneratePinOffsets(NumPins, EdgeLength, PinSense, EdgeOffset, Gap):\n  Offsets = []\n  # reduce length of edge by the edge offset at each end\n  # giving a length that we generate pins and slots over\n  PinEdgeLength = EdgeLength - (EdgeOffset * 2)\n  # get length of each pin\n  if PinSense == False:\n    PinLength = PinEdgeLength / (NumPins + (NumPins - 1))\n    PinState = True\n  else:\n    PinLength = PinEdgeLength / (NumPins + (NumPins + 1))\n    PinState = False\n  # generate start and end point of each pin\n  CurrentPin = 0\n  for Y in frange(EdgeOffset, EdgeLength - EdgeOffset, PinLength):\n    if PinState:\n      # if pins are never at the edges then always use gap on each\n      # side of pin\n      if PinSense == True:\n        Offsets.append([Y - Gap, Y + PinLength + Gap])\n      # pins could be at edges where we don&#039;t want the gap to be applied\n      else:\n        if CurrentPin == 0:\n          # first pin, no gap at start\n          Offsets.append([Y, Y + PinLength + Gap])\n        elif CurrentPin == NumPins - 1:\n          # last pin, no gap at end\n          Offsets.append([Y - Gap, Y + PinLength])\n        else:\n          # middle pin, gap at start and end\n          Offsets.append([Y - Gap, Y + PinLength + Gap])\n      CurrentPin += 1\n    PinState = not PinState\n  return Offsets\n# generates slot offsets\n# NumPins = number of pins\n# EdgeLength = length of edge for slots\n# PinSense = True = slot at edge, False = pin at edge\n# EdgeOffset = distance from ends of edges before pins\n# Gap = distance between slot and pin\n# returns: [ [Slot_1_Start, Slot_1_End], ..., [Slot_n_Start, Slot_n_End] ]\ndef GenerateSlotOffsets(NumPins, EdgeLength, PinSense, EdgeOffset, Gap):\n  Offsets = []\n  # reduce length of edge by the edge offset at each end\n  # giving a length that we generate pins and slots over\n  PinEdgeLength = EdgeLength - (EdgeOffset * 2)\n  # get length of each pin\n  if PinSense == False:\n    PinLength = PinEdgeLength / (NumPins + (NumPins - 1))\n    PinState = False\n  else:\n    PinLength = PinEdgeLength / (NumPins + (NumPins + 1))\n    PinState = True\n  if PinSense == True:\n    NumSlots = NumPins + 1\n  else:\n    NumSlots = NumPins - 1\n  # add initial slot for edge offset if pins are on outside of slots\n  if EdgeOffset &gt; 0 and PinSense == False:\n    Offsets.append([0, EdgeOffset + (Gap * 2.0)])\n  # generate start and end point of each slot\n  CurrentSlot = 0\n  for Y in frange(EdgeOffset, EdgeLength - EdgeOffset, PinLength):\n    if PinState:\n      # if slots are never at the edges then always use gap on each\n      # side of slot\n      if PinSense == False or (EdgeOffset &gt; 0):\n        Offsets.append([Y - Gap, Y + PinLength + Gap])\n      # slots could be at edges where we don&#039;t want the gap to be applied\n      else:\n        if CurrentSlot == 0:\n          # first slot, no gap at start\n          Offsets.append([Y, Y + PinLength + Gap])\n        elif CurrentSlot == NumSlots - 1:\n          # last slot, no gap at end\n          Offsets.append([Y - Gap, Y + PinLength])\n        else:\n          # middle pin, gap at start and end\n          Offsets.append([Y - Gap, Y + PinLength + Gap])\n      CurrentSlot += 1\n    PinState = not PinState\n  # add final slot for edge offset if pins are on outside of slots\n  if EdgeOffset &gt; 0 and PinSense == False:\n    Offsets.append([EdgeLength - EdgeOffset - (Gap * 2.0), EdgeLength])\n  if EdgeOffset &gt; 0 and PinSense == True:\n    # extend first slot to cover edge offset\n    Offsets[0][0] = 0\n    # extend last slot to cover edge offset\n    Offsets[len(Offsets) - 1][1] = EdgeLength\n  return Offsets\n# generates the pins\n# Prt = part to create pins on\n# Fce = face on part to create pins\n# PinOffsets = start and end values for pins\n# Thickness = depth of pins\n# SharedEdge = edge to generate pins along\ndef GeneratePins(Prt, Fce, PinOffsets, Thickness, SharedEdge):\n  TabProfile = Prt.AddSketch(&#039;Pin Profile&#039;, Fce)\n  TabEdge = GetPartEdge(Prt, SharedEdge)\n  TabProfile.StartFaceMapping(TabEdge[0], TabEdge[1])\n  for PinOffset in PinOffsets:\n    TabProfile.AddRectangle(PinOffset[0], 0, PinOffset[1], Thickness, False)\n  TabProfile.StopFaceMapping()\n  # cut out rectangles (pins)\n  Prt.AddExtrudeCut(&#039;Pins&#039;, TabProfile, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, False)\n# generates the slots\n# Prt = part to create slots on\n# Fce = face on part to create slots\n# SlotOffsets = start and end values for slots\n# Thickness = depth of slots\n# SharedEdge = edge to generate slots along\ndef GenerateSlots(Prt, Fce, SlotOffsets, Thickness, SharedEdge):\n  BaseProfile = Prt.AddSketch(&#039;Slot Profile&#039;, Fce)\n  BaseEdge = GetPartEdge(Prt, SharedEdge)\n  BaseProfile.StartFaceMapping(BaseEdge[0], BaseEdge[1])\n  for SlotOffset in SlotOffsets:\n    BaseProfile.AddRectangle(SlotOffset[0], 0, SlotOffset[1], Thickness, False)\n  BaseProfile.StopFaceMapping()\n  # cut out rectangles (slots)\n  Prt.AddExtrudeCut(&#039;Slots&#039;, BaseProfile, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, False)\n# creates a joint based on user inputs\ndef CreateJoint(Values):\n  TabPart      = Values[1]\n  BasePart     = Values[2]\n  NumberofPins = Values[3]\n  PinSense     = Values[4]\n  EdgeOffset   = Values[5]\n  Gap          = Values[6]\n  print &quot;Gathering information...&quot;\n  # get edge shared by both parts\n  SharedEdge = GetSharedEdge(TabPart, BasePart)\n  # get the part faces for the shared edge\n  TabFaces = GetFacesFromEdge(TabPart, SharedEdge)\n  BaseFaces = GetFacesFromEdge(BasePart, SharedEdge)\n  # get the largest faces on each part that use the shared edge\n  TabFace = GetLargestFace(TabFaces)\n  BaseFace = GetLargestFace(BaseFaces)\n  # the smallest faces on each part that use the shared edge\n  TabEndFace = GetSmallestFace(TabFaces)\n  BaseEndFace = GetSmallestFace(BaseFaces)\n  # get length of shared edge\n  SharedEdgeLength = GetEdgeLength(SharedEdge[0], SharedEdge[1])\n  # get thickness of each part\n  TabThickness = GetShortestEdge(TabEndFace).Length\n  BaseThickness = GetShortestEdge(BaseEndFace).Length\n  print &quot;Calculating...&quot;\n  # generate pin and slot offsets\n  PinOffsets = GeneratePinOffsets(NumberofPins, SharedEdgeLength, PinSense, EdgeOffset, Gap / 2.0)\n  SlotOffsets = GenerateSlotOffsets(NumberofPins, SharedEdgeLength, PinSense, EdgeOffset, Gap / 2.0)\n  print &quot;Generating...&quot;\n  # generate pins and slots\n  GeneratePins(TabPart, TabFace, PinOffsets, BaseThickness, SharedEdge)\n  GenerateSlots(BasePart, BaseFace, SlotOffsets, TabThickness, SharedEdge)\n  print &quot;Finished&quot;\n#################################################################################################\n# check minimum requirements\nif AlibreScriptVersion &lt; 1110:\n  sys.exit(&#039;Please upgrade your copy of Alibre Design to use this script&#039;)\nScriptName = &#039;Joint Creator&#039;\nWin = Windows()\n# define options to show in dialog window\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;JointCreatorIcon.png&#039;, 200])\nOptions.append([&#039;Tab Part&#039;, WindowsInputTypes.Part, None])\nOptions.append([&#039;Base Part&#039;, WindowsInputTypes.Part, None])\nOptions.append([&#039;Number of Pins&#039;, WindowsInputTypes.Integer, 5])\nOptions.append([&#039;Pins on Inside&#039;, WindowsInputTypes.Boolean, False])\nOptions.append([&#039;Offset From Ends&#039;, WindowsInputTypes.Real, 0.0])\nOptions.append([&#039;Gap Between Pins and Slots&#039;, WindowsInputTypes.Real, 0.0])\n# show utility window\nWin.UtilityDialog(ScriptName, &#039;Create Joint&#039;, CreateJoint, None, Options, 200)"},"alibre-script-examples/List-All-Parts-in-an-Assembly-and-Sub-Assemblies":{"slug":"alibre-script-examples/List-All-Parts-in-an-Assembly-and-Sub-Assemblies","filePath":"alibre-script-examples/List-All-Parts-in-an-Assembly-and-Sub-Assemblies.md","title":"List-All-Parts-in-an-Assembly-and-Sub-Assemblies","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/list-all-parts-in-an-assembly-and-sub-assemblies\n# list all the parts in an assembly and it&#039;s sub-assemblies\ndef ListPartsinAssembly(Assem):\n  for P in Assem.Parts:\n    print &#039;%s in %s&#039; % (P, Assem)\n  for SA in Assem.SubAssemblies:\n    ListPartsinAssembly(SA)\n# top-level assembly, replace with your own path\nAssem = Assembly(r&#039;C:\\Users\\&lt;username&gt;\\Downloads\\ASM&#039;, &#039;Main ASM.AD_ASM&#039;)\nListPartsinAssembly(Assem)\nAssem.Close()"},"alibre-script-examples/Lofting-with-a-Guide-Curve":{"slug":"alibre-script-examples/Lofting-with-a-Guide-Curve","filePath":"alibre-script-examples/Lofting-with-a-Guide-Curve.md","title":"Lofting-with-a-Guide-Curve","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/lofting-with-a-guide-curve\n# create part\nP = Part(&#039;foo&#039;)\n# create sketch for bottom of loft\nBottom = P.AddSketch(&#039;Bottom&#039;, P.GetPlane(&#039;XY-Plane&#039;))\nBottom.AddRectangle(0, 0, 10, 10, False)\n# create sketch for top of loft\nTopPlane = P.AddPlane(&#039;Top Plane&#039;, P.GetPlane(&#039;XY-Plane&#039;), 30)\nTop = P.AddSketch(&#039;Top&#039;, TopPlane)\nTop.AddRectangle(0, 0, 50, 50, False)\n# create guide curve\nGuide = P.Add3DSketch(&#039;Guide&#039;)\nGuide.AddBspline([10,10,0, 20,20,5, 45,45,15, 50,50,30])\n# create loft using guide curve\nP.AddLoftBoss(&#039;Loft Test&#039;, [Bottom, Top], [Guide], GuideCurveTypes.Global, True, False, False, False)"},"alibre-script-examples/Midplane-Extrusion":{"slug":"alibre-script-examples/Midplane-Extrusion","filePath":"alibre-script-examples/Midplane-Extrusion.md","title":"Midplane-Extrusion","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/midplane-extrusion\n# create the part and then a sketch containing a circle\nP = Part(&#039;Test&#039;)\nS = P.AddSketch(&#039;Shape&#039;, P.GetPlane(&#039;XY-Plane&#039;))\nS.AddCircle(0, 0, 9, False)\n# how far we will extrude from mid-plane\nExtrudeLength = 10\n# extrude it\nP.AddExtrudeBoss(&#039;Cyl&#039;, S, ExtrudeLength, False, Part.EndCondition.MidPlane, None, 0, Part.DirectionType.Normal, None, 0, False)"},"alibre-script-examples/Mobius-Strip":{"slug":"alibre-script-examples/Mobius-Strip","filePath":"alibre-script-examples/Mobius-Strip.md","title":"Mobius-Strip","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/mobius-strip\n# creates a mobius strip with a configurable number of rotations\nMobius = Part(&#039;Mobius&#039;)\n# dimensions of mobius strip\nDiameter = 100.0\nWidth = 20.0\nHeight = 5.0\n# number of 360 degree twists in mobius strip\nRotations = 2\n# more steps = better accuracy\nSteps = 30\n# calculate how far we rotate through 360 degrees for each step\nRotationPerStep = Rotations / float(Steps) * 360.0\nDegreesPerStep = 360.0 / Steps\n# create the base sketch we will use as a template for all other sketches\nS0Plane = Mobius.GetPlane(&#039;XY-Plane&#039;)\nS0 = Mobius.AddSketch(&#039;S0&#039;, S0Plane)\nS0.AddRectangle(Diameter, -Height / 2, Diameter + Width, Height / 2, False)\nSketches = [S0]\n# generate sketches\nfor Step in range (1, Steps):\n  Plane = Mobius.AddPlane(&#039;S&#039; + str(Step), S0Plane, Mobius.GetAxis(&#039;Y-Axis&#039;), DegreesPerStep * Step)\n  Sketch = Mobius.AddSketch(&#039;S&#039; + str(Step), Plane)\n  Sketch.CopyFrom(S0, RotationPerStep * Step, Diameter + (Width / 2), 0, 0, 0, 0, 0, 100.0)\n  Sketches.append(Sketch)\n# create loft, connecting ends\nMobius.AddLoftBoss(&#039;Strip&#039;, Sketches, True, True, False, True)"},"alibre-script-examples/Modify-an-Existing-Part":{"slug":"alibre-script-examples/Modify-an-Existing-Part","filePath":"alibre-script-examples/Modify-an-Existing-Part.md","title":"Modify-an-Existing-Part","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/modify-an-existing-part\n# demonstrates opening an existing part and adding a 3d sketch to it\n# load P:\\work\\TestPart.AD_PRT\nMyPart = Part(r&#039;C:\\Users\\&lt;username&gt;\\Desktop\\ScriptDir&#039;, &#039;New&#039;)\n# create a 3D sketch\nRoute = MyPart.Add3DSketch(&#039;Route&#039;)\nRoute.AddBspline([0, 0, 0,    5, 0, 0,    10, 5, 5,    15, 10, 5,    15, 15, 15])"},"alibre-script-examples/Parameters-with-Units":{"slug":"alibre-script-examples/Parameters-with-Units","filePath":"alibre-script-examples/Parameters-with-Units.md","title":"Parameters-with-Units","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/parameters-with-units\n# this script uses inches for it&#039;s units\nUnits.Current = UnitTypes.Inches\nMyPart = Part(&#039;Foo&#039;)\n# create parameter using current script units\nLengthParam = MyPart.AddParameter(&#039;Length&#039;, ParameterTypes.Distance, 123.4)\n# parameter value reads back in current script units\nprint &#039;Value in script units =&#039;, LengthParam.Value\n# cteate parameter in degrees\nRotationParam = MyPart.AddParameter(&#039;Rotation&#039;, ParameterTypes.Angle, 34.2)\n# parameter reads back in degrees\nprint &#039;Value in degrees = &#039;, RotationParam.Value\n# create parameter with specific units\nWidthParam = MyPart.AddParameter(&#039;Width&#039;, ParameterTypes.Distance, ParameterUnits.Centimeters, 7.32)\n# reads back in current script units\nprint &#039;Value in script units = &#039;, WidthParam.Value\n# reads back the actual value we wrote\nprint &#039;Value we wrote = &#039;, WidthParam.RawValue\n# create parameter with specific units\nWidthParam2 = MyPart.AddParameter(&#039;Width2&#039;, ParameterTypes.Distance, ParameterUnits.Inches, 1.0)\n# reads back in current script units\nprint &#039;Value in script units = &#039;, WidthParam2.Value\n# reads back the actual value we wrote\nprint &#039;Value we wrote = &#039;, WidthParam2.RawValue\n# create parameter with no units\nCount = MyPart.AddParameter(&#039;Count&#039;, ParameterTypes.Count, ParameterUnits.Unitless, 45)\n# reads back value\nprint &#039;Count value = &#039;, Count.Value"},"alibre-script-examples/Pocket-Hole-Creator":{"slug":"alibre-script-examples/Pocket-Hole-Creator","filePath":"alibre-script-examples/Pocket-Hole-Creator.md","title":"Pocket-Hole-Creator","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/pocket-hole-creator\n# Pocket Hole Creator\n# (c) Alibre, LLC 2019, All Rights Reserved\n# Version 1.00\nfrom __future__ import division\nfrom math import *\n# compares two points [X1, Y1, Z1] and [X2, Y2, Z2]\n# returns true if they are the same\ndef PointsAreEqual(P1, P2):\n  if (round(P1[0], 6) == round(P2[0], 6) and\n      round(P1[1], 6) == round(P2[1], 6) and\n      round(P1[2], 6) == round(P2[2], 6)):\n    return True\n  else:\n    return False\n# gets part faces that use an edge\n# returns a list of faces\ndef GetFacesFromEdge(Prt, Ege):\n  Faces = []\n  PartEdge = [[Ege.Vertices[0].X, Ege.Vertices[0].Y, Ege.Vertices[0].Z], [Ege.Vertices[1].X, Ege.Vertices[1].Y, Ege.Vertices[1].Z]]\n  for Fce in Prt.Faces:\n    for Edg in Fce.GetEdges():\n      EdgeVertices = Edg.GetVertices()\n      V1 = [EdgeVertices[0].X, EdgeVertices[0].Y, EdgeVertices[0].Z]\n      V2 = [EdgeVertices[1].X, EdgeVertices[1].Y, EdgeVertices[1].Z]\n      if ((PointsAreEqual(V1, PartEdge[0]) and PointsAreEqual(V2, PartEdge[1])) or\n          (PointsAreEqual(V2, PartEdge[0]) and PointsAreEqual(V1, PartEdge[1]))):\n         Faces.append(Fce)\n  return Faces\n# given a part, face and edge of the face this returns the other face\n# that shares the same edge\ndef GetOtherFace(Prt, Edg, TopFace):\n  Fces = GetFacesFromEdge(Prt, Edg)\n  for EgeFace in Fces:\n    if EgeFace.Name != TopFace.Name:\n      return EgeFace\n  return None\n# creates a pocket hole\ndef CreatePocketHole(Values):\n  # TargetEdge = edge that the pocket hole is on\n  # Fce = face where the pocket is inserted\n  # DistanceFromEdge = distance from the edge of the face for the packet\n  # Depth = distance from pocket to drill hole\n  # Diameter = diameter of packet\n  # DrillDiameter = diameter of drill hole\n  # Angle = angle of pocket\n  TargetEdge       = Values[1]\n  Fce              = Values[2]\n  DistanceFromEdge = Values[3]\n  Depth            = Values[4]\n  Diameter         = Values[5]\n  DrillDiameter    = Values[6]\n  Angle            = Values[7]\n  Prt = Fce.GetPart()\n  # get face that has exit hole\n  ExitFace = GetOtherFace(Prt, TargetEdge, Fce)\n  # get thickness of part (height of face with exit hole)\n  ExitFaceEdges = ExitFace.GetEdges()\n  Thickness = 0\n  for ExEdg in ExitFaceEdges:\n    if ExEdg.Length &gt; 0:\n      if ExEdg.Length != TargetEdge.Length:\n        Thickness = ExEdg.Length\n  if Thickness == 0:\n    print &quot;Unable to get thickness of part&quot;\n    sys.exit()\n  # get location of center of exit hole\n  ExitHoleCenterX = TargetEdge.Length - DistanceFromEdge\n  ExitHoleCenterY = Thickness / 2.0\n  # get location of exit hole center in 3D coordinates\n  ExitSk = Prt.AddSketch(&#039;Exit Sk&#039;, ExitFace)\n  ExitSk.StartFaceMapping(TargetEdge.Vertices[0], TargetEdge.Vertices[1])\n  ExitPt = ExitSk.AddPoint(ExitHoleCenterX, ExitHoleCenterY, False)\n  ExitSk.StopFaceMapping()\n  ExitPtGlobal = ExitSk.PointtoGlobal(ExitSk.Figures[0].X, ExitSk.Figures[0].Y)\n  Prt.RemoveSketch(ExitSk)\n  # create exit point\n  ExitPoint = Prt.AddPoint(&#039;Exit&#039;, ExitPtGlobal[0], ExitPtGlobal[1], ExitPtGlobal[2])\n  # get location of entry hole in 2D\n  EntryHoleCenterX = DistanceFromEdge\n  EntryHoleCenterY = (Thickness / 2.0) / tan(radians(Angle))\n  # get location of entry hole center in 3D coordinates\n  EntrySk = Prt.AddSketch(&#039;Entry Sk&#039;, Fce)\n  EntrySk.StartFaceMapping(TargetEdge.Vertices[0], TargetEdge.Vertices[1])\n  EntryPt = EntrySk.AddPoint(EntryHoleCenterX, EntryHoleCenterY, False)\n  EntrySk.StopFaceMapping()\n  EntryPtGlobal = EntrySk.PointtoGlobal(EntrySk.Figures[0].X, EntrySk.Figures[0].Y)\n  Prt.RemoveSketch(EntrySk)\n  # create entry point\n  EntryPoint = Prt.AddPoint(&#039;Entry&#039;, EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  # create axis from entry to exit point\n  PocketAxis = Prt.AddAxis(&#039;Pocket Axis&#039;, EntryPoint.GetCoordinates(), ExitPoint.GetCoordinates())\n  # create plane perpendicular to axis on the start point\n  nx = ExitPtGlobal[0] - EntryPtGlobal[0]\n  ny = ExitPtGlobal[1] - EntryPtGlobal[1]\n  nz = ExitPtGlobal[2] - EntryPtGlobal[2]\n  EntryPlane = Prt.AddPlane(&#039;Entry Plane&#039;, [nx, ny, nz], EntryPoint.GetCoordinates())\n  # get drill distances\n  EntrytoExitDistance = (Thickness / 2.0) / sin(radians(Angle))\n  Drill1Distance = EntrytoExitDistance - Depth\n  # first drill\n  Drill1Sk = Prt.AddSketch(&#039;Drill 1&#039;, EntryPlane)\n  DrillCenter = Drill1Sk.GlobaltoPoint(EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  Drill1Sk.AddCircle(DrillCenter[0], DrillCenter[1], Diameter, False)\n  Prt.AddExtrudeCut(&#039;Drill 1&#039;, Drill1Sk, Drill1Distance * 2, False, Part.EndCondition.MidPlane, None, 0, Part.DirectionType.Normal, None, 0, 0)\n  # second drill\n  Drill2Sk = Prt.AddSketch(&#039;Drill 2&#039;, EntryPlane)\n  DrillCenter = Drill2Sk.GlobaltoPoint(EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  Drill2Sk.AddCircle(DrillCenter[0], DrillCenter[1], DrillDiameter, False)\n  Prt.AddExtrudeCut(&#039;Drill 2&#039;, Drill2Sk, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, 0)\n  # clean up\n  EntryPoint.Hide()\n  ExitPoint.Hide()\n  PocketAxis.Hide()\n  EntryPlane.Hide()\n###########################################################################################\n# check minimum requirements\nif AlibreScriptVersion &lt; 1110:\n  sys.exit(&#039;Please upgrade your copy of Alibre Design to use this script&#039;)\nScriptName = &#039;Pocket Hole Creator&#039;\nWin = Windows()\n# define options to show in dialog window\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;PocketHoleCreatorIcon.png&#039;, 200])\nOptions.append([&#039;Edge&#039;, WindowsInputTypes.Edge, None])\nOptions.append([&#039;Face&#039;, WindowsInputTypes.Face, None])\nOptions.append([&#039;Distance From Edge&#039;, WindowsInputTypes.Real, 20.0])\nOptions.append([&#039;Depth&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Diameter&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Drill Diameter&#039;, WindowsInputTypes.Real, 4.0])\nOptions.append([&#039;Angle&#039;, WindowsInputTypes.Real, 15.0])\n# show utility window\nWin.UtilityDialog(ScriptName, &#039;Create Pocket Hole&#039;, CreatePocketHole, None, Options, 200)"},"alibre-script-examples/Polygon-Incircle":{"slug":"alibre-script-examples/Polygon-Incircle","filePath":"alibre-script-examples/Polygon-Incircle.md","title":"Polygon-Incircle","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/polygon-incircle\nimport math\n# diameter of circle that fits inside polygon\nDiameter = 100\n# number of sides\nSides = 6\n# calculate exterior diameter of polygon\nEDia = Diameter / math.cos(math.pi / Sides)\n# create part, create polygon sketch, extrude\nP = Part(&#039;Hex&#039;)\nS = P.AddSketch(&#039;Hexagon&#039;, P.GetPlane(&#039;XY-Plane&#039;))\nS.AddPolygon(0, 0, EDia, Sides, False)\nP.AddExtrudeBoss(&#039;Hex Head&#039;, S, 10, False)"},"alibre-script-examples/Profile-and-Sweep-Path":{"slug":"alibre-script-examples/Profile-and-Sweep-Path","filePath":"alibre-script-examples/Profile-and-Sweep-Path.md","title":"Profile-and-Sweep-Path","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/profile-and-sweep-path\n# create the part and get the yz plane\nMyPart = Part(&#039;Test&#039;)\nYZPlane = MyPart.GetPlane(&#039;YZ-Plane&#039;)\n# create the route for the pipe\nPipeRoute = MyPart.Add3DSketch(&#039;Pipe Route&#039;)\nPipeRoute.AddBspline([0, 0, 0,    5, 0, 0,    10, 5, 5,    15, 10, 5,    15, 15, 15])\n# create the pipe profile as a circle on the yz plane\nStartProfile = MyPart.AddSketch(&#039;Start Profile&#039;, YZPlane)\nStartProfile.AddCircle(0, 0, 5, False)"},"alibre-script-examples/Reading-from-a-Spreadsheet":{"slug":"alibre-script-examples/Reading-from-a-Spreadsheet","filePath":"alibre-script-examples/Reading-from-a-Spreadsheet.md","title":"Reading-from-a-Spreadsheet","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/reading-from-a-spreadsheet\nfrom openpyxl import load_workbook\n# open a workbook, replace with your own path\nwb = load_workbook(filename = &#039;C:\\\\Users\\\\&lt;username&gt;\\\\Downloads\\\\Book1.xlsx&#039;)\n# get access to the sheet\nSheet1 = wb[&#039;Sheet1&#039;]\n# get the value in cell C3\nprint Sheet1[&#039;C3&#039;].value"},"alibre-script-examples/Rectangular-hollow-formed-profiles":{"slug":"alibre-script-examples/Rectangular-hollow-formed-profiles","filePath":"alibre-script-examples/Rectangular-hollow-formed-profiles.md","title":"Rectangular-hollow-formed-profiles","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/rectangular-hollow-formed-profiles\n# Rectangular hollow hot and cold formed profiles according to BS/EN-10210-2:1997 and BS/EN-10219:1997\n# Measurements table H,B,T,ro,ri from here www.roymech.co.uk/Useful_Tables/Sections/RHS_cf.html\nfrom collections import OrderedDict\nPData = 0\nHData = {}\nHData[50.0]={}\nHData[50.0][25.0]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0]\nHData[50.0][30.0]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0]\nHData[60.0]={}\nHData[60.0][40.0]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3]\nHData[76.2]={}\nHData[76.2][50.8]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[80.0]={}\nHData[80.0][40.0]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[90.0]={}\nHData[90.0][50.0]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[100.0]={}\nHData[100.0][50.0]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[100.0][60.0]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[120.0]={}\nHData[120.0][60.0]=[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 12.0, 8.0]\nHData[120.0][80.0]=[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0]\nHData[140.0]={}\nHData[140.0][80.0]=[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0]\nHData[150.0]={}\nHData[150.0][100.0]=[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5]\nHData[160.0]={}\nHData[160.0][80.0]=[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5]\nHData[180.0]={}\nHData[180.0][100.0]=[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5]\nHData[200.0]={}\nHData[200.0][100.0]=[4.0, 7.5, 5.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[200.0][120.0]=[6.0, 9.45, 6.3],[6.3, 12.0, 8.0],[8.0, 15.0, 10.0],[10.0, 18.0, 12.0],[12.0, 18.75, 12.5],[12.5, 24.0, 16.0]\nHData[250.0]={}\nHData[250.0][150.0]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[260.0]={}\nHData[260.0][180.0]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[300.0]={}\nHData[300.0][200.0]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[350.0]={}\nHData[350.0][250.0]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[400.0]={}\nHData[400.0][200.0]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[450.0]={}\nHData[450.0][250.0]=[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[500.0]={}\nHData[500.0][300.0]=[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0],[20.0, 30.0, 20.0]\nCData = {}\nCData[40.0]={}\nCData[40.0][20.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0]\nCData[50.0]={}\nCData[50.0][25.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0]\nCData[50.0][30.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0]\nCData[60.0]={}\nCData[60.0][40.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[70.0]={}\nCData[70.0][50.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[80.0]={}\nCData[80.0][40.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[80.0][60.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[90.0]={}\nCData[90.0][50.0]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[100.0]={}\nCData[100.0][40.0]=[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[100.0][50.0]=[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45]\nCData[100.0][60.0]=[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45]\nCData[100.0][80.0]=[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45]\nCData[120.0]={}\nCData[120.0][60.0]=[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0]\nCData[120.0][80.0]=[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0]\nCData[140.0]={}\nCData[140.0][80.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0]\nCData[150.0]={}\nCData[150.0][100.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[160.0]={}\nCData[160.0][80.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[180.0]={}\nCData[180.0][100.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[200.0]={}\nCData[200.0][100.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[200.0][120.0]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[250.0]={}\nCData[250.0][100.0]=[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.5, 37.5, 25.0]\nCData[250.0][150.0]=[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[260.0]={}\nCData[260.0][180.0]=[5.0, 10.0, 5.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[300.0]={}\nCData[300.0][100.0]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[300.0][150.0]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[300.0][200.0]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[350.0]={}\nCData[350.0][250.0]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[400.0]={}\nCData[400.0][200.0]=[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[400.0][300.0]=[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\n#--- INPUT HERE ---#\nprint(&#039;Select hot or cold formed profiles&#039;)\nprint(&#039;0 = Hot\\n1 = Cold&#039;)\nHorC = int(Read())\nif HorC == 0:\n    PData = OrderedDict(sorted(HData.items(), key=lambda t: t[0]))\nelse:\n    PData = OrderedDict(sorted(CData.items(), key=lambda t: t[0]))\nprint(&#039;Please select height&#039;)\nfor i,j in enumerate(PData):\n    print i,&#039;-&#039;,j,&#039;mm&#039;\nreadH = int(Read())\nSize = PData.keys()[readH]\nWData = PData[Size]\nprint(&#039;Please select width&#039;)\nfor i,j in enumerate(WData):\n    print i,&#039;-&#039;,j,&#039;mm&#039;\nreadW = int(Read())\nWidth = WData.keys()[readW]\nprint(&#039;Please select thickness&#039;)\nfor i,j in enumerate(WData[Width]):\n    print i,&#039;-&#039;,j[0],&#039;mm&#039;\nreadTh = int(Read())\nThick = WData[Width][readTh][0]\nro = WData[Width][readTh][1]\nri = WData[Width][readTh][2]\nprint(&#039;Please input length in mm&#039;)\nLength = float(Read())\n#--- INPUT STOP ---#\n# all values are in millimeters\nUnits.Current = UnitTypes.Millimeters\n# Create part\nSquare = Part(&#039;Hollow Section %dx%dx%dx%d&#039; % (Size,Width,Thick,Length))\n# Body\nProfile = Square.AddSketch(&#039;Profile&#039;, Square.GetPlane(&#039;XY-Plane&#039;))\n# Outer square\nLine = Polyline()\nLine.AddPoint(PolylinePoint(-Width/2.,-Size/2.))\nLine.AddPoint(PolylinePoint(Width/2.,-Size/2.))\nLine.AddPoint(PolylinePoint(Width/2.,Size/2.))\nLine.AddPoint(PolylinePoint(-Width/2.,Size/2.))\nLine.AddPoint(PolylinePoint(-Width/2.,-Size/2.))\nProfile.AddPolyline(Line,False)\n# Inner Square\nLine = Polyline()\nLine.AddPoint(PolylinePoint((-Width/2.)+Thick,(-Size/2.)+Thick))\nLine.AddPoint(PolylinePoint((Width/2.)-Thick,(-Size/2.)+Thick))\nLine.AddPoint(PolylinePoint((Width/2.)-Thick,(Size/2.)-Thick))\nLine.AddPoint(PolylinePoint((-Width/2.)+Thick,(Size/2.)-Thick))\nLine.AddPoint(PolylinePoint((-Width/2.)+Thick,(-Size/2.)+Thick))\nProfile.AddPolyline(Line,False)\n# Extrude\nSquare.AddExtrudeBoss(&#039;Extrude&#039;,Profile,Length,False)\n# Outer radius\nSquare.AddFillet(&#039;Fillet&lt;1&gt;&#039;,[Square.GetEdge(&#039;Edge&lt;6&gt;&#039;),Square.GetEdge(&#039;Edge&lt;2&gt;&#039;),Square.GetEdge(&#039;Edge&lt;4&gt;&#039;),Square.GetEdge(&#039;Edge&lt;9&gt;&#039;)],ro,False)\n# Inner radius\nSquare.AddFillet(&#039;Fillet&lt;2&gt;&#039;,[Square.GetEdge(&#039;Edge&lt;30&gt;&#039;),Square.GetEdge(&#039;Edge&lt;31&gt;&#039;),Square.GetEdge(&#039;Edge&lt;33&gt;&#039;),Square.GetEdge(&#039;Edge&lt;35&gt;&#039;)],ri,False)"},"alibre-script-examples/Reference-Geometry":{"slug":"alibre-script-examples/Reference-Geometry","filePath":"alibre-script-examples/Reference-Geometry.md","title":"Reference-Geometry","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/default-reference-geometry\n# create a new part\nP = Part(&quot;Test&quot;)\n# access reference geometry\nprint P.XYPlane\nprint P.YZPlane\nprint P.ZXPlane\nprint P.XAxis\nprint P.YAxis\nprint P.ZAxis\nprint P.Origin"},"alibre-script-examples/Scaling-a-Sketch":{"slug":"alibre-script-examples/Scaling-a-Sketch","filePath":"alibre-script-examples/Scaling-a-Sketch.md","title":"Scaling-a-Sketch","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/scaling-a-sketch\nUnits.Current = UnitTypes.Inches\nTestRoom = Part(&#039;TEST ROOM Scaled&#039;, False)\nOriginalSketch = TestRoom.GetSketch(&#039;Sketch&lt;1&gt;&#039;)\n# currently 8.25&#039; wide, need it to be 4.125&#039;\nScaleFactor = 4.125 / 8.25 * 100.0\nScaledSketch = TestRoom.AddSketch(&#039;Scaled&#039;, TestRoom.GetFace(&#039;Face&lt;6&gt;&#039;))\nScaledSketch.CopyFrom(OriginalSketch, 0, 0, 0, 8.25, 0, 0, 0, ScaleFactor)"},"alibre-script-examples/Servo-Cam":{"slug":"alibre-script-examples/Servo-Cam","filePath":"alibre-script-examples/Servo-Cam.md","title":"Servo-Cam","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/servo-cam\nmajorwidth  = 13.763\nminorwidth  = 6.260\nheight      = 7.000\nslotwidth   = 3.000\nbaseheight  = 2.000\nservoheight = 4.000\nservoinside = 4.200\nGripperCam = Part(&#039;GripperCam&#039;)\nBase = GripperCam.AddSketch(&#039;Base&#039;, GripperCam.GetPlane(&#039;XY-Plane&#039;))\nBase.AddLine([-majorwidth / 2, -height / 2], [majorwidth / 2, -height / 2], False)\nBase.AddLine([-majorwidth / 2,  height / 2], [majorwidth / 2,  height / 2], False)\nBase.AddArcCenterStartEnd( majorwidth / 2, 0,  majorwidth / 2, -height / 2,  majorwidth / 2,  height / 2, False)\nBase.AddArcCenterStartEnd(-majorwidth / 2, 0, -majorwidth / 2,  height / 2, -majorwidth / 2, -height / 2, False)\nBase.AddLine([minorwidth / 2, -slotwidth / 2], [majorwidth / 2, -slotwidth / 2], False)\nBase.AddLine([minorwidth / 2,  slotwidth / 2], [majorwidth / 2,  slotwidth / 2], False)\nBase.AddArcCenterStartEnd(majorwidth / 2, 0, majorwidth / 2, -slotwidth / 2, majorwidth / 2,  slotwidth / 2, False)\nBase.AddArcCenterStartEnd(minorwidth / 2, 0, minorwidth / 2,  slotwidth / 2, minorwidth / 2, -slotwidth / 2, False)\nBase.AddLine([-minorwidth / 2, -slotwidth / 2], [-majorwidth / 2, -slotwidth / 2], False)\nBase.AddLine([-minorwidth / 2,  slotwidth / 2], [-majorwidth / 2,  slotwidth / 2], False)\nBase.AddArcCenterStartEnd(-majorwidth / 2, 0, -majorwidth / 2,  slotwidth / 2, -majorwidth / 2, -slotwidth / 2, False)\nBase.AddArcCenterStartEnd(-minorwidth / 2, 0, -minorwidth / 2, -slotwidth / 2, -minorwidth / 2,  slotwidth / 2, False)\nGripperCam.AddExtrudeBoss(&#039;Base&#039;, Base, baseheight, False)\nServo = GripperCam.AddSketch(&#039;Servo&#039;, GripperCam.GetFace(&#039;Face&lt;13&gt;&#039;))\nServo.AddCircle(0, 0, 9, False)\nServo.AddCircle(0, 0, servoinside, False)\nGripperCam.AddExtrudeBoss(&#039;Servo&#039;, Servo, servoheight, False)\nHoles = GripperCam.AddSketch(&#039;Holes&#039;, GripperCam.GetPlane(&#039;XY-Plane&#039;))\nHoles.AddLine([minorwidth / 2, -slotwidth / 2], [majorwidth / 2, -slotwidth / 2], False)\nHoles.AddLine([minorwidth / 2,  slotwidth / 2], [majorwidth / 2,  slotwidth / 2], False)\nHoles.AddArcCenterStartEnd(majorwidth / 2, 0, majorwidth / 2, -slotwidth / 2, majorwidth / 2,  slotwidth / 2, False)\nHoles.AddArcCenterStartEnd(minorwidth / 2, 0, minorwidth / 2,  slotwidth / 2, minorwidth / 2, -slotwidth / 2, False)\nHoles.AddLine([-minorwidth / 2, -slotwidth / 2], [-majorwidth / 2, -slotwidth / 2], False)\nHoles.AddLine([-minorwidth / 2,  slotwidth / 2], [-majorwidth / 2,  slotwidth / 2], False)\nHoles.AddArcCenterStartEnd(-majorwidth / 2, 0, -majorwidth / 2,  slotwidth / 2, -majorwidth / 2, -slotwidth / 2, False)\nHoles.AddArcCenterStartEnd(-minorwidth / 2, 0, -minorwidth / 2, -slotwidth / 2, -minorwidth / 2,  slotwidth / 2, False)\nGripperCam.AddExtrudeCut(&#039;Holes&#039;, Holes, baseheight + servoheight, False)"},"alibre-script-examples/Slice-a-Part":{"slug":"alibre-script-examples/Slice-a-Part","filePath":"alibre-script-examples/Slice-a-Part.md","title":"Slice-a-Part","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/slice-a-part\n# open part, replace with your own path\nP = Part(r&#039;C:\\Users\\Brian\\Desktop\\ScriptDir&#039;, &#039;New2&#039;)\n# get bounding box of part - eight points, one for each corner\n# of the bounding box\nBounds = P.GetBoundingBox()\n# get the plane that the part will be sliced on\nSlicePlane = P.GetPlane(&#039;Slice&#039;)\n# create a sketch on the slicing plane\nS = P.AddSketch(&#039;SliceSketch&#039;, SlicePlane)\n# empty list\nProj = []\n# for each corner of the part bounding box, map that 3D point into\n# a 2D point on the sketch\n# this doesn&#039;t create the points in the sketch, but is only a mathematical\n# operation\nfor i in range(0, 8):\n  Proj.append(S.GlobaltoPoint(Bounds[i][0], Bounds[i][1], Bounds[i][2]))\n# go through the eight 2D points and find the maximum and minimum\n# X and Y values\nMaxX = Proj[0][0]\nfor i in range (0, 8):\n  if Proj[i][0] &gt;= MaxX :\n    MaxX = Proj[i][0]\nMaxY = Proj[0][1]\nfor i in range (0, 8):\n  if Proj[i][1] &gt;= MaxY :\n    MaxY = Proj[i][1]\nMinX = Proj[0][0]\nfor i in range (0, 8):\n  if Proj[i][0] &lt; MinX :\n    MinX = Proj[i][0]\nMinY = Proj[0][1]\nfor i in range (0, 8):\n  if Proj[i][1] &lt; MinY :\n    MinY = Proj[i][1]\n# draw a rectangle on the sketch which will cover the entire part when viewed\n# perpendicular to the slicing plane\nS.AddRectangle(MinX, MinY, MaxX, MaxY, False)\n# cut the part using the rectangle\nP.AddExtrudeCut(&#039;Cut&#039;, S, 100, False)"},"alibre-script-examples/Square-hollow-formed-profiles":{"slug":"alibre-script-examples/Square-hollow-formed-profiles","filePath":"alibre-script-examples/Square-hollow-formed-profiles.md","title":"Square-hollow-formed-profiles","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/square-hollow-formed-profiles\n# Square hollow hot and cold formed profiles according to BS/EN-10210-2:1997 and BS/EN-10219:1997\n# Measurements table B,T,ro,ri from here www.roymech.co.uk/Useful_Tables/Sections/SHS_hf.html\nPData = 0\nHData = {}\nHData[20]=[2,3,2],[2.5,3.75,2.5]\nHData[25]=[2.0, 3.0, 2.0],[2.5, 3.75, 2.5],[3.0, 4.5, 3.0]\nHData[30]=[2.0, 3.0, 2.0],[2.5, 3.75, 2.5],[3.0, 4.5, 3.0]\nHData[40]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0]\nHData[50]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3]\nHData[60]=[2.5, 3.75, 2.5],[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[70]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[80]=[3.0, 4.5, 3.0],[3.2, 4.8, 3.2],[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[90]=[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0]\nHData[100]=[3.6, 5.4, 3.6],[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0]\nHData[120]=[4.0, 6.0, 4.0],[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5]\nHData[140]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5]\nHData[150]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[160]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[180]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[200]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[220]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[250]=[5.0, 7.5, 5.0],[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[260]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[300]=[6.0, 9.0, 6.0],[6.3, 9.45, 6.3],[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[350]=[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0]\nHData[400]=[8.0, 12.0, 8.0],[10.0, 15.0, 10.0],[12.0, 18.0, 12.0],[12.5, 18.75, 12.5],[16.0, 24.0, 16.0],[20.0, 30.0, 20.0]\nCData = {}\nCData[20]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5]\nCData[25]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0]\nCData[30]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0]\nCData[40]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0]\nCData[50]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0]\nCData[60]=[2.0, 4.0, 2.0],[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45]\nCData[70]=[2.5, 5.0, 2.5],[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45]\nCData[80]=[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0]\nCData[90]=[3.0, 6.0, 3.0],[3.6, 7.2, 3.6],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0]\nCData[100]=[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[120]=[3.0, 6.0, 3.0],[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[140]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0]\nCData[150]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[160]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[180]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[200]=[4.0, 8.0, 4.0],[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[220]=[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[250]=[5.0, 10.0, 5.0],[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[260]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[300]=[6.0, 12.0, 6.0],[6.3, 15.75, 9.45],[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[350]=[8.0, 20.0, 12.0],[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\nCData[400]=[10.0, 25.0, 15.0],[12.0, 36.0, 24.0],[12.5, 37.5, 25.0],[16.0, 48.0, 32.0]\n#--- INPUT HERE ---#\nprint(&#039;Select hot or cold formed profiles&#039;)\nprint(&#039;0 = Hot\\n1 = Cold&#039;)\nHorC = int(Read())\nif HorC == 0:\n    PData = HData\nelse:\n    PData = CData\nprint(&#039;Input dimension in mm, only integers&#039;)\nprint sorted(PData, key=lambda key: PData[key])\nSize = int(Read())\nprint(&#039;Please select thickness&#039;)\nfor i,j in enumerate(PData[Size]):\n    print i,&#039;-&#039;,j[0],&#039;mm&#039;\nreadTh = int(Read())\nThick = PData[Size][readTh][0]\nro = PData[Size][readTh][1]\nri = PData[Size][readTh][2]\nprint(&#039;Please input length in mm&#039;)\nLength = float(Read())\n#--- INPUT STOP ---#\n# all values are in millimeters\nUnits.Current = UnitTypes.Millimeters\n# Create part\nSquare = Part(&#039;Hollow Section %dx%dx%d&#039; % (Size,Thick,Length))\n# Body\nProfile = Square.AddSketch(&#039;Profile&#039;, Square.GetPlane(&#039;XY-Plane&#039;))\n# Outer square\nLine = Polyline()\nLine.AddPoint(PolylinePoint(-Size/2.,-Size/2))\nLine.AddPoint(PolylinePoint(Size/2.,-Size/2))\nLine.AddPoint(PolylinePoint(Size/2.,Size/2))\nLine.AddPoint(PolylinePoint(-Size/2.,Size/2))\nLine.AddPoint(PolylinePoint(-Size/2.,-Size/2))\nProfile.AddPolyline(Line,False)\n# Inner Square\nscaleFactor = ((Size-(Thick*2.))/Size)*100.0\n#print scaleFactor\nProfile.CopyFrom(Profile,0,0,0,0,0,0,0,scaleFactor)\n# Extrude\nSquare.AddExtrudeBoss(&#039;Extrude&#039;,Profile,Length,False)\n# Outer radius\nSquare.AddFillet(&#039;Fillet&lt;1&gt;&#039;,[Square.GetEdge(&#039;Edge&lt;6&gt;&#039;),Square.GetEdge(&#039;Edge&lt;2&gt;&#039;),Square.GetEdge(&#039;Edge&lt;4&gt;&#039;),Square.GetEdge(&#039;Edge&lt;9&gt;&#039;)],ro,False)\n# Inner radius\nSquare.AddFillet(&#039;Fillet&lt;2&gt;&#039;,[Square.GetEdge(&#039;Edge&lt;30&gt;&#039;),Square.GetEdge(&#039;Edge&lt;31&gt;&#039;),Square.GetEdge(&#039;Edge&lt;33&gt;&#039;),Square.GetEdge(&#039;Edge&lt;35&gt;&#039;)],ri,False)"},"alibre-script-examples/Supressing-Unsupressing-and-Removing-Features":{"slug":"alibre-script-examples/Supressing-Unsupressing-and-Removing-Features","filePath":"alibre-script-examples/Supressing-Unsupressing-and-Removing-Features.md","title":"Supressing-Unsupressing-and-Removing-Features","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/supressing-unsupressing-and-removing-features\n# create a part\nP = Part(&#039;Example Part&#039;)\n# create a cube\nCubeSketch = P.AddSketch(&#039;CubeProfile&#039;, P.GetPlane(&#039;XY-Plane&#039;))\nCubeSketch.AddRectangle(0, 0, 10, 10, False)\nCubeFeature = P.AddExtrudeBoss(&#039;Cube&#039;, CubeSketch, 10, True)\n# cut a hole in the cube\nHoleSketch = P.AddSketch(&#039;HoleProfile&#039;, P.GetPlane(&#039;XY-Plane&#039;))\nHoleSketch.AddRectangle(2, 2, 8, 8, False)\nHoleFeature = P.AddExtrudeCut(&#039;Hole&#039;, HoleSketch, 10, True)\n# suppress the cube using the name of the feature\nP.SuppressFeature(&#039;Cube&#039;)\n# unsuppress the cube using the feature object\nP.UnsuppressFeature(CubeFeature)\n# remove the hole using the name of the feature\nP.RemoveFeature(&#039;Hole&#039;)\n# remove the hole sketch using the sketch object\nP.RemoveSketch(HoleSketch)"},"alibre-script-examples/Tool-Cutting":{"slug":"alibre-script-examples/Tool-Cutting","filePath":"alibre-script-examples/Tool-Cutting.md","title":"Tool-Cutting","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/tool-cutting\n# cylinder dimensions\nDiameter = 20\nLength = 100\n# cutter dimensions\nCutterDiameter = 5\n# angle to increase by on each pass of the cutter, in degrees\n# must be a whole divisor of 180\nStepAngle = 10\n# total angle of cutting around the cylinder\nTotalAngle = 1440\n# starting distance from end of cylinder\nStartX = 10\n# create the cylinder\nP = Part(&#039;Cylinder&#039;)\nCylPlane = P.GetPlane(&#039;XY-Plane&#039;)\nCrossSection = P.AddSketch(&#039;Cross-Section&#039;, CylPlane)\nCrossSection.AddCircle(0,0, Diameter, False)\nP.AddExtrudeBoss(&#039;Cylinder&#039;, CrossSection, Length, False)\n# create the planes\nPlanes = []\nNumPlanes = 180 / StepAngle\nfor PlaneIndex in range(0, NumPlanes):\n  Angle = PlaneIndex * StepAngle\n  Pl = P.AddPlane(&#039;P&#039; + str(Angle), P.GetPlane(&#039;YZ-Plane&#039;), P.GetAxis(&#039;Z-Axis&#039;), Angle)\n  Planes.append(Pl)\nfor PlaneIndex in range(0, NumPlanes):\n  Planes.append(Planes[PlaneIndex])\nNumPlanes = NumPlanes * 2\n# start of helix has no offset along cylinder\nXStep = 0\n# create circle sketches then extrude cut &#039;through all&#039;\nfor Step in range(0, TotalAngle / StepAngle):\n  Angle = Step * StepAngle\n  NormalizedAngle = Angle % 360\n  XStep += (Angle * 0.001)\n  if NormalizedAngle &lt; 90:\n    X = -(StartX + XStep)\n    Y = Diameter / 2.0\n  elif NormalizedAngle == 90:\n    X = -(Diameter / 2.0)\n    Y = -(StartX + XStep)\n  elif NormalizedAngle &lt; 180:\n    X = (StartX + XStep)\n    Y = -(Diameter / 2.0)\n  elif NormalizedAngle &lt; 270:\n    X = -(StartX + XStep)\n    Y = -(Diameter / 2.0)\n  elif NormalizedAngle == 270:\n    X = (Diameter / 2.0)\n    Y = -(StartX + XStep)\n  else:\n    X = (StartX + XStep)\n    Y = Diameter / 2.0\n  Sk = P.AddSketch(&#039;S&#039; + str(Angle), Planes[Step % NumPlanes])\n  Sk.AddCircle(X, Y, CutterDiameter, False)\n  P.AddExtrudeCut(&#039;S&#039; + str(Angle), Sk, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, False)"},"alibre-script-examples/Triangle":{"slug":"alibre-script-examples/Triangle","filePath":"alibre-script-examples/Triangle.md","title":"Triangle","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/triangle\n# Create triangle with angles 90, 15, 75\nimport math\n# set up parameters\nTheta = 15.0\nAdjacent = 100.0\n# calculate side\nOpposite = Adjacent * math.tan(math.radians(Theta))\n# generate three vertices of triangle\nP1_X = 0\nP1_Y = 0\nP2_X = Adjacent\nP2_Y = 0\nP3_X = Adjacent\nP3_Y = Opposite\n# create part and sketch\nP = Part(&#039;Foo&#039;)\nS = P.AddSketch(&#039;Shape&#039;, P.GetPlane(&#039;XY-Plane&#039;))\n# draw it\nS.AddLine(P1_X, P1_Y, P2_X, P2_Y, False)\nS.AddLine(P2_X, P2_Y, P3_X, P3_Y, False)\nS.AddLine(P3_X, P3_Y, P1_X, P1_Y, False)"},"alibre-script-examples/Type-11-flanges-according-to-BS-EN-1092-PN16":{"slug":"alibre-script-examples/Type-11-flanges-according-to-BS-EN-1092-PN16","filePath":"alibre-script-examples/Type-11-flanges-according-to-BS-EN-1092-PN16.md","title":"Type-11-flanges-according-to-BS-EN-1092-PN16","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/type-11-flanges-according-to-bs-en-1092-pn16\nfrom math import cos,sin,radians\n# Size of Flange TYPE 11 According to BS/EN-1092 PN16\n#--- INPUT HERE ---#\nprint(&#039;Input DN Flange size: 10, 15, 20, 25, 32, 40, 50, 65, 80, 100, 125, 150, 200, 250, 300, 350, 400, 450, 500, 600, 700, 800, 900, 1000, 1200, 1400, 1600&#039;)\nDN = int(Read())\n#--- INPUT STOP ---#\n# Measurements table D,C2,H2,H3,R,A,N1,d1,f1,K,L,N from here\n#www.roymech.co.uk/Useful_Tables/Flanges/BSEN1092_16_Dimensions.html\nDNData = {}\nDNData[10] = [90,14,35,6,4,17.2,28,40,2,60,14,4]\nDNData[15] = [95,14,35,6,4,21.3,32,45,2,65,14,4]\nDNData[20] = [105,14,38,6,4,26.9,39,58,2,75,14,4]\nDNData[25] = [115,16,38,6,4,33.7,46,68,2,85,14,4]\nDNData[32] = [140,16,40,6,6,42.4,56,78,2,100,18,4]\nDNData[40] = [150,16,42,7,6,48.3,64,88,2,110,18,4]\nDNData[50] = [165,18,45,8,6,60.3,75,102,2,125,18,4]\nDNData[65] = [185,18,45,10,6,76.1,90,122,2,145,18,4]\nDNData[80] = [200,20,50,10,8,88.9,105,138,2,160,18,8]\nDNData[100] = [220,20,52,12,8,114.3,131,158,2,180,18,8]\nDNData[125] = [250,22,55,12,8,139.7,156,188,2,210,18,8]\nDNData[150] = [285,22,55,12,10,168.3,192,212,2,240,22,8]\nDNData[200] = [340,24,62,16,10,219.1,235,268,2,295,22,12]\nDNData[250] = [405,26,70,16,12,273,292,320,2,355,26,12]\nDNData[300] = [460,28,78,16,12,323.9,344,378,2,410,26,12]\nDNData[350] = [520,30,82,16,12,355.6,390,438,2,470,26,16]\nDNData[400] = [580,32,85,16,12,406.4,445,490,2,525,30,16]\nDNData[450] = [640,40,87,16,12,457,490,550,2,585,30,20]\nDNData[500] = [715,44,90,16,12,508,548,610,2,650,33,20]\nDNData[600] = [840,54,95,18,12,610,652,725,2,770,36,20]\nDNData[700] = [910,36,100,18,12,711,755,795,2,840,36,24]\nDNData[800] = [1025,38,105,20,12,813,855,900,2,950,39,24]\nDNData[900] = [1125,40,110,20,12,914,955,1000,2,1050,39,28]\nDNData[1000] = [1255,42,120,22,16,1016,1058,1115,2,1170,42,28]\nDNData[1200] = [1485,48,130,30,16,1219,1262,1330,2,1390,48,32]\nDNData[1400] = [1685,52,145,30,16,1420,1465,1530,2,1590,48,36]\nDNData[1600] = [1930,58,160,35,16,1620,1668,1750,2,1820,56,40]\nD = DNData[DN][0]\nC2 = DNData[DN][1]\nH2 = DNData[DN][2]\nH3 = DNData[DN][3]\nR = DNData[DN][4]\nA = DNData[DN][5]\nN1 = DNData[DN][6]\nd1 = DNData[DN][7]\nf1 = DNData[DN][8]\nK = DNData[DN][9]\nL = DNData[DN][10]\nN = DNData[DN][11]\n# all values are in millimeters\nUnits.Current = UnitTypes.Millimeters\n# Create part\nFlange = Part(&#039;DN%d Flange PN16&#039; % (DN))\n# body\nProfile = Flange.AddSketch(&#039;Profile&#039;, Flange.GetPlane(&#039;XY-Plane&#039;))\nLine = Polyline()\nLine.AddPoint(PolylinePoint(DN/2.,0))\nLine.AddPoint(PolylinePoint(d1/2.,0))\nLine.AddPoint(PolylinePoint(d1/2.,f1))\nLine.AddPoint(PolylinePoint(D/2.,f1))\nLine.AddPoint(PolylinePoint(D/2.,C2))\nLine.AddPoint(PolylinePoint(N1/2.,C2))\nLine.AddPoint(PolylinePoint(A/2.,H2-H3))\nLine.AddPoint(PolylinePoint(A/2.,H2))\nLine.AddPoint(PolylinePoint(DN/2.,H2))\nLine.AddPoint(PolylinePoint(DN/2.,0))\nProfile.AddPolyline(Line,False)\nFlange.AddRevolveBoss(&#039;Body&#039;, Profile, Flange.GetAxis(&#039;Y-Axis&#039;),360)\n#Chamfer\nFlange.AddChamfer(&#039;Chamfer&lt;1&gt;&#039;,Flange.GetFace(&#039;Face&lt;2&gt;&#039;),1,False)\n#Fillet\nFlange.AddFillet(&#039;Fillet&lt;1&gt;&#039;,[Flange.GetEdge(&#039;Edge&lt;6&gt;&#039;),Flange.GetEdge(&#039;Edge&lt;7&gt;&#039;)],R,False)\n# Hole\nHole = Flange.AddSketch(&#039;Hole&#039;,Flange.GetFace(&#039;Face&lt;8&gt;&#039;))\nfor i in xrange(N):\n    Ang = (360/N)*i\n    Hole.AddCircle(sin(radians(Ang))*K/2.,cos(radians(Ang))*K/2.,L,False)\nFlange.AddExtrudeCut(&#039;Flange Hole&#039;,Hole,C2,True)"},"alibre-script-examples/Units":{"slug":"alibre-script-examples/Units","filePath":"alibre-script-examples/Units.md","title":"Units","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/units\n# demonstrates using multiple units in a script\n# create a part and a sketch\nMyPart = Part(&#039;My Part&#039;)\nXYPlane = MyPart.GetPlane(&#039;XY-Plane&#039;)\nSketch = MyPart.AddSketch(&#039;Sketch&#039;, XYPlane)\n# set units to mm - this is implied at the start of every script\nUnits.Current = UnitTypes.Millimeters\n# create circle 50mm in diameter\nSketch.AddCircle(0, 0, 50, False)\n# set units to inches\n# all values from now on are in inches\nUnits.Current = UnitTypes.Inches\n# create a circle 1.34 inches in diameter\nSketch.AddCircle(0, 0, 1.34, False)\n# switch to cm\n# now all values from this point until the next units change are in cm\nUnits.Current = UnitTypes.Centimeters\n# create a circle 4.2cm in diameter\nSketch.AddCircle(0, 0, 4.2, False)"},"alibre-script-examples/Useful-Dialogs":{"slug":"alibre-script-examples/Useful-Dialogs","filePath":"alibre-script-examples/Useful-Dialogs.md","title":"Useful-Dialogs","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/useful-dialogs\nWin = Windows()\nWin.InfoDialog(&#039;I am about to create a part&#039;, &#039;My Script&#039;)\nWin.ErrorDialog(&quot;Oops. That didn&#039;t go as planned&quot;, &#039;My Script&#039;)\n# returns True for &#039;yes&#039; and False for &#039;no&#039;\nprint Win.QuestionDialog(&#039;Shall I stop?&#039;, &#039;My Script&#039;)"},"alibre-script-examples/Wave-washer":{"slug":"alibre-script-examples/Wave-washer","filePath":"alibre-script-examples/Wave-washer.md","title":"Wave-washer","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/wave-washer\nimport math\nfrom math import *\n# radius\nR = 100.0\n# amplitude\nA = 10.0\n# number of waves (must be a whole number)\nB = 4\n# width\nWidth = 10\n# thickness\nThickness = 5\nWin = Windows()\nOptions = []\nOptions.append([&#039;Radius&#039;, WindowsInputTypes.Real, R])\nOptions.append([&#039;Amplitude&#039;, WindowsInputTypes.Real, A])\nOptions.append([&#039;Number of Waves&#039;, WindowsInputTypes.Integer, B])\nOptions.append([&#039;Width&#039;, WindowsInputTypes.Real, Width])\nOptions.append([&#039;Thickness&#039;, WindowsInputTypes.Real, Thickness])\nValues = Win.OptionsDialog(&#039;Wave Washer Generator&#039;, Options)\nif Values == None:\n  sys.exit()\nR = Values[0]\nA = Values[1]\nB = Values[2]\nWidth = Values[3]\nThickness = Values[4]\n# path accuracy = lower number = more points calculated\nt_step = 0.1\n# complete circle = PI x 2\nt_max = 3.141592 * 2\n# keep track of the total points we have calculated\nTotalPoints = 0\n# calculate points for 3D sketch\nPathPoints = []\nt = 0\nwhile True:\n  X = R * sin(t)\n  Y = R * cos(t)\n  Z = A * sin(B * t)\n  PathPoints.extend([X, Y, Z])\n  if TotalPoints == 0:\n    P1 = [X, Y, Z]\n  elif TotalPoints == 1:\n    P2 = [X, Y, Z]\n  t = t + t_step\n  TotalPoints = TotalPoints + 1\n  if t &gt;= t_max:\n    break\n# close path\nPathPoints.extend([PathPoints[0], PathPoints[1], PathPoints[2]])\n# create part and add 3d sketch\nP = Part(&#039;Wave Washer&#039;)\nPath = P.Add3DSketch(&#039;Path&#039;)\nPath.AddBspline(PathPoints)\n# calculate normal vector for the plane at the start of the path\nnormal_vector = [P2[0] - P1[0], P2[1] - P1[1], P2[2] - P1[2]]\n# create plane at the start of the path\nPlane = P.AddPlane(&#039;Start Plane&#039;, normal_vector, P1)\nCrossSection = P.AddSketch(&#039;Cross Section&#039;, Plane)\nOrigin = CrossSection.GlobaltoPoint(P1[0], P1[1], P1[2])\nCrossSection.AddRectangle(Origin[0] - (Thickness / 2.0), Origin[1] - (Width / 2.0), Origin[0] + (Thickness / 2.0), Origin[1] + (Width / 2.0), False)\nP.AddSweepBoss(&#039;Washer&#039;, CrossSection, Path, False, Part.EndCondition.EntirePath, None, 0, 0, False)"},"alibre-script-examples/Working-with-Configurations":{"slug":"alibre-script-examples/Working-with-Configurations","filePath":"alibre-script-examples/Working-with-Configurations.md","title":"Working-with-Configurations","links":[],"tags":[],"content":"#help.alibre.com/articles/#!alibre-help-v28/working-with-configurations\n# create a new part\nP = Part(&#039;Test&#039;)\n# create a new configuration\nFoo = P.AddConfiguration(&#039;Foo&#039;)\n# it&#039;s already unlocked by default but this is how to unlock a configuration\nFoo.UnlockAll()\n# set a single lock\nFoo.SetLocks(LockTypes.SuppressNewFeatures)\n# set multiple locks\nFoo.SetLocks(LockTypes.SuppressNewFeatures | LockTypes.LockColorProperties)\n# activate the configuration\nFoo.Activate()\n# create a new configuration using &#039;Foo&#039; as a base\nBar = P.AddConfiguration(&#039;Bar&#039;, &#039;Foo&#039;)\n# activate it\nBar.Activate()\n# get access to the default configuration and apply all locks to it\nConfig1 = P.GetConfiguration(&#039;Config&lt;1&gt;&#039;)\nConfig1.LockAll()\n# show the name of the active configuration\nActiveConfig = P.GetActiveConfiguration()\nprint &#039;Current active configuration is: %s&#039; % ActiveConfig.Name\n# show the total number of configurations\nprint &#039;Total number of configurations: %d&#039; % len(P.Configurations)\n# show the name of the second configuration\nprint &#039;Second configuration is: %s&#039; % P.Configurations[1].Name\n# check if a couple of the confgurations are active\nprint &#039;Is second configuration active? %s&#039; % (&#039;yes&#039; if P.Configurations[1].IsActive == True else &#039;no&#039;)\nprint &#039;Is configuration &quot;Bar&quot; active? %s&#039; % (&#039;yes&#039; if Bar.IsActive == True else &#039;no&#039;)"},"alibre-script-library-examples/Import-and-Export/Part-Exporter":{"slug":"alibre-script-library-examples/Import-and-Export/Part-Exporter","filePath":"alibre-script-library-examples/Import and Export/Part Exporter.md","title":"Part Exporter","links":[],"tags":[],"content":"# Part exporter script\n# Demonstrates exporting a set of parts\n# For use with Alibre Design\nimport fnmatch\nimport os\nfrom os.path import expanduser\nWin = Windows()\nScriptName = &#039;Part Exporter&#039;\nExportTypes = [&#039;STEP203&#039;, &#039;STEP214&#039;, &#039;STL&#039;, &#039;IGES&#039;, &#039;SAT&#039;, &#039;BMP&#039;]\nOptions = []\nOptions.append([&#039;Folder containing parts&#039;, WindowsInputTypes.Folder, expanduser(&#039;~&#039;), &#039;Choose a folder containing the parts.&#039;])\nOptions.append([&#039;Output folder&#039;, WindowsInputTypes.Folder, expanduser(&#039;~&#039;), &#039;Choose a folder to put the exported files&#039;])\nOptions.append([&#039;Export type&#039;, WindowsInputTypes.StringList, ExportTypes, ExportTypes[0]])\nValues = Win.OptionsDialog(ScriptName, Options, 300)\nif Values == None:\n  sys.exit()\n# get the inputs\nPartsFolder = Values[0]\nOutputFolder = Values[1]\nExportType = ExportTypes[Values[2]]\n# validate\nif not PartsFolder:\n  Win.ErrorDialog(&#039;No part folder selected&#039;, ScriptName)\n  sys.exit();\nif os.path.isdir(PartsFolder) == False:\n  Win.ErrorDialog(&#039;Folder containing parts does not exist&#039;, ScriptName)\n  sys.exit();\nif not OutputFolder:\n  Win.ErrorDialog(&#039;No output folder selected&#039;, ScriptName)\n  sys.exit();\nif os.path.isdir(OutputFolder) == False:\n  Win.ErrorDialog(&#039;Output folder does not exist&#039;, ScriptName)\n  sys.exit();\nprint &quot;Searching for parts...&quot;\n# create empty lists\nParts = []\n# perform the search\nfor Root, Dirnames, Filenames in os.walk(PartsFolder):\n  for Filename in fnmatch.filter(Filenames, &#039;*.AD_PRT&#039;):\n    Parts.append(os.path.join(Root, Filename))\n# if no parts found...\nif len(Parts) == 0:\n  Win.ErrorDialog(&#039;No parts found&#039;, ScriptName)\n  sys.exit();\n# export each part\nfor PartFileName in Parts:\n  print &quot;Exporting {0}...&quot;.format(PartFileName)\n  Folder = os.path.dirname(os.path.abspath(PartFileName))\n  FileName = os.path.basename(PartFileName)\n  FileNameNoExt, Ext = os.path.splitext(FileName)\n  OutputFileName = OutputFolder + &#039;\\\\&#039; + FileNameNoExt\n  # open, export, close\n  P = Part(Folder, FileName)\n  if ExportType == &#039;STEP203&#039;:\n    P.ExportSTEP203(OutputFileName + &#039;.stp&#039;)\n    print &quot;Created {0} (203)&quot;.format(OutputFileName + &#039;.stp&#039;)\n  elif ExportType == &#039;STEP214&#039;:\n    P.ExportSTEP214(OutputFileName + &quot;.stp&quot;)\n    print &quot;Created {0} (214)&quot;.format(OutputFileName + &#039;.stp&#039;)\n  elif ExportType == &#039;STL&#039;:\n    P.ExportSTL(OutputFileName + &quot;.stl&quot;)\n    print &quot;Created {0}&quot;.format(OutputFileName + &#039;.stl&#039;)\n  elif ExportType == &#039;IGES&#039;:\n    P.ExportIGES(OutputFileName + &quot;.igs&quot;)\n    print &quot;Created {0}&quot;.format(OutputFileName + &#039;.igs&#039;)\n  elif ExportType == &#039;SAT&#039;:\n    P.ExportSAT(OutputFileName + &quot;.sat&quot;, 18, True)\n    print &quot;Created {0}&quot;.format(OutputFileName + &#039;.sat&#039;)\n  elif ExportType == &#039;BMP&#039;:\n    P.SaveSnapshot(OutputFileName + &#039;.bmp&#039;, 800, 600, True, False)\n    print &quot;Created {0}&quot;.format(OutputFileName + &#039;.bmp&#039;)\n  P.Close()\nWin.InfoDialog(&#039;Exported {0} parts&#039;.format(len(Parts)), ScriptName)"},"alibre-script-library-examples/Import-and-Export/STL-Exporter":{"slug":"alibre-script-library-examples/Import-and-Export/STL-Exporter","filePath":"alibre-script-library-examples/Import and Export/STL Exporter.md","title":"STL Exporter","links":[],"tags":[],"content":"# exports rotated STLs with a specific face on the bottom\nScriptName = &#039;STL Exporter&#039;\nWin = Windows()\n# called when an input changes in the dialog window\ndef InputChanged(Index, Value):\n  # use custom settings changed\n  if Index == Index_UseCustom:\n    UpdateUserInterface()\n# updates the user interface based on the current selections made\ndef UpdateUserInterface():\n  UseCustom = Win.GetInputValue(Index_UseCustom)\n  if UseCustom == True:\n    Win.EnableInput(Index_MaxCellSize)\n    Win.EnableInput(Index_NormalDeviation)\n    Win.EnableInput(Index_SurfaceDeviation)\n  else:\n    Win.DisableInput(Index_MaxCellSize)\n    Win.DisableInput(Index_NormalDeviation)\n    Win.DisableInput(Index_SurfaceDeviation)\n# get current settings, if any\nCurrentSettings = CurrentPart().GetUserData(&#039;alibre.stlexporter.settings&#039;)\nif CurrentSettings == None:\n  CurrentSettings = {}\n# define options to show in dialog window\nOptions = []\nOptions.append([&#039;File Name&#039;, WindowsInputTypes.SaveFile, CurrentSettings[&#039;FileName&#039;] if &#039;FileName&#039; in CurrentSettings else None])\nIndex_FileName = 0\nOptions.append([&#039;Bottom Face&#039;, WindowsInputTypes.Face, CurrentPart().GetFace(CurrentSettings[&#039;BottomFace&#039;]) if &#039;BottomFace&#039; in CurrentSettings else None])\nIndex_BottomFace = 1\nOptions.append([&#039;Force STL units to millimeters&#039;, WindowsInputTypes.Boolean, CurrentSettings[&#039;ForceMM&#039;] if &#039;ForceMM&#039; in CurrentSettings else True])\nIndex_ForceMM = 2\nOptions.append([&#039;Use Custom Settings&#039;, WindowsInputTypes.Boolean, CurrentSettings[&#039;UseCustom&#039;] if &#039;UseCustom&#039; in CurrentSettings else False])\nIndex_UseCustom = 3\nOptions.append([&#039;Custom Normal Deviation&#039;, WindowsInputTypes.Real, CurrentSettings[&#039;NormalDev&#039;] if &#039;NormalDev&#039; in CurrentSettings else 10])\nIndex_NormalDeviation = 4\nOptions.append([None, WindowsInputTypes.Image, &#039;NormalDeviation.jpg&#039;, 170])\nOptions.append([&#039;Custom Surface Deviation&#039;, WindowsInputTypes.Real, CurrentSettings[&#039;SurfaceDev&#039;] if &#039;SurfaceDev&#039; in CurrentSettings else 0])\nIndex_SurfaceDeviation = 6\nOptions.append([None, WindowsInputTypes.Image, &#039;SurfaceDeviation.jpg&#039;, 170])\nOptions.append([&#039;Custom Max Cell Size&#039;, WindowsInputTypes.Real, CurrentSettings[&#039;MaxCellSize&#039;] if &#039;MaxCellSize&#039; in CurrentSettings else 0])\nIndex_MaxCellSize = 8\nOptions.append([None, WindowsInputTypes.Image, &#039;MaxCellSize.jpg&#039;, 170])\n# show dialog to user, get inputs\nValues = Win.OptionsDialog(ScriptName, Options, 170, InputChanged, UpdateUserInterface)\nif Values == None:\n  sys.exit()\n# get the inputs\nBottomFace = Values[Index_BottomFace]\nCurrentSettings[&#039;BottomFace&#039;] = BottomFace.Name\nCurrentSettings[&#039;FileName&#039;] = Values[Index_FileName]\nCurrentSettings[&#039;ForceMM&#039;] = Values[Index_ForceMM]\nCurrentSettings[&#039;UseCustom&#039;] = Values[Index_UseCustom]\nCurrentSettings[&#039;MaxCellSize&#039;] = Values[Index_MaxCellSize]\nCurrentSettings[&#039;NormalDev&#039;] = Values[Index_NormalDeviation]\nCurrentSettings[&#039;SurfaceDev&#039;] = Values[Index_SurfaceDeviation]\n# update settings on part\nCurrentPart().SetUserData(&#039;alibre.stlexporter.settings&#039;, CurrentSettings)\nif CurrentSettings[&#039;FileName&#039;] == &quot;&quot;:\n  Win.ErrorDialog(&#039;No filename entered&#039;, ScriptName)\n  sys.exit()\nif BottomFace == None:\n  Win.ErrorDialog(&#039;No bottom face selected&#039;, ScriptName)\n  sys.exit()\n# export rotated stl\nMyPart = CurrentPart()\nMyPart.ExportRotatedSTL(CurrentSettings[&#039;FileName&#039;], BottomFace,\n  CurrentSettings[&#039;ForceMM&#039;], CurrentSettings[&#039;UseCustom&#039;], CurrentSettings[&#039;MaxCellSize&#039;],\n  CurrentSettings[&#039;NormalDev&#039;], CurrentSettings[&#039;SurfaceDev&#039;])\nWin.InfoDialog(&#039;Export completed&#039;, ScriptName)"},"alibre-script-library-examples/Mathematical/Equation-Sketcher":{"slug":"alibre-script-library-examples/Mathematical/Equation-Sketcher","filePath":"alibre-script-library-examples/Mathematical/Equation Sketcher.md","title":"Equation Sketcher","links":[],"tags":[],"content":"# Equation sketcher script\n# Demonstrates selecting sketches, inserting a sketch\n# For use with Alibre Design\nfrom __future__ import division\nfrom math import sqrt\nWin = Windows()\nScriptName = &#039;Equation Sketcher&#039;\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;EquationSketcher.png&#039;, 170])\nOptions.append([&#039;Start point X&#039;, WindowsInputTypes.Integer, 0])\nOptions.append([&#039;Start point Y&#039;, WindowsInputTypes.Integer, 0])\nOptions.append([&#039;Equation y = &#039;, WindowsInputTypes.String, &#039;0.1*x**2&#039;])\nOptions.append([&#039;Plane&#039;, WindowsInputTypes.Plane, None])\nOptions.append([&#039;X Range Start&#039;, WindowsInputTypes.Real, 0])\nOptions.append([&#039;X Range End&#039;, WindowsInputTypes.Real, 10])\nOptions.append([&#039;Number of points&#039;, WindowsInputTypes.Integer, 10])\nOptions.append([&#039;Swap X and Y&#039;, WindowsInputTypes.Boolean, False])\nValues = Win.OptionsDialog(ScriptName, Options, 170)\nif Values == None:\n  sys.exit()\n# get the inputs\nNodeX = Values[1]\nNodeY = Values[2]\nEquation = Values[3]\nPl = Values[4]\nStartX = Values[5]\nEndX = Values[6]\nNumPoints = Values[7]\nSwapXY = Values[8]\n# validate\nif not Equation:\n  Win.ErrorDialog(&#039;No equation entered&#039;, ScriptName)\n  sys.exit()\nif Pl == None:\n  Win.ErrorDialog(&#039;No plane selected&#039;, ScriptName)\n  sys.exit()\nif StartX &gt; EndX:\n  Win.ErrorDialog(&#039;Start X value is greater than end X value&#039;, ScriptName)\n  sys.exit()\nif NumPoints &lt; 2:\n  Win.ErrorDialog(&#039;Invalid number of points&#039;, ScriptName)\n  sys.exit()\n# get the part that defines the sketch\nPrt = Pl.GetPart()\n# create a sketch on the plane\nSk = Prt.AddSketch(&quot;Equation Sketch&quot;, Pl)\nprint &quot;Loading library...&quot;\n# we only import this now because it can cause a bit of a delay\nfrom sympy import *\nprint &quot;Calculating...&quot;\n# parse equation\nx = Symbol(&#039;x&#039;)\nEq = sympify(Equation)\n# work out how much we increase x between points\nStepX = (EndX - StartX) / NumPoints\n# calculate the points\nPoints = []\nValX = StartX\nfor p in xrange(NumPoints):\n  ValY = Eq.subs(x, ValX)\n  if SwapXY == True:\n    PY = ValX\n    PX = ValY\n  else:\n    PX = ValX\n    PY = ValY\n  Points.extend([float(PX + NodeX), float(PY + NodeY)])\n  ValX = ValX + StepX\nprint &quot;Generating sketch...&quot;\n# generate the bspline\nSk.AddBspline(Points, False)"},"alibre-script-library-examples/Mechanical/Gear-Generator":{"slug":"alibre-script-library-examples/Mechanical/Gear-Generator","filePath":"alibre-script-library-examples/Mechanical/Gear Generator.md","title":"Gear Generator","links":[],"tags":[],"content":"# Gear Generator Script\n# Used as a demonstration of how to create a custom utility\n# for use with Alibre Design\nUnits.Current = UnitTypes.Millimeters\n# default settings\nNumberofTeeth = 20\nPitchDiameter = 30\nPressureAngle = 20\nThickness = 3\nWin = Windows()\nScriptName = &#039;Gear Generator&#039;\n# create dialog window and show to user\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;GearGenerator.png&#039;, 170])\nOptions.append([&#039;Number of Teeth&#039;, WindowsInputTypes.Integer, NumberofTeeth])\nOptions.append([&#039;Pitch Diameter (mm)&#039;, WindowsInputTypes.Real, PitchDiameter])\nOptions.append([&#039;Pressure Angle&#039;, WindowsInputTypes.Real, PressureAngle])\nOptions.append([&#039;Thickness (mm)&#039;, WindowsInputTypes.Real, Thickness])\nValues = Win.OptionsDialog(ScriptName, Options, 170)\nif Values == None:\n  sys.exit()\nprint &quot;Working...&quot;\n# get user inputs\nNumberofTeeth = Values[1]\nPitchDiameter = Values[2]\nPressureAngle = Values[3]\nThickness = Values[4]\n# get current part\nMyPart = CurrentPart()\n# get the plane to create the gear on\nGearPlane = MyPart.XYPlane\n# create the sketch then extrude it\nProfileSketch = MyPart.AddGearNP(&quot;Profile&quot;, NumberofTeeth, PitchDiameter, PressureAngle, 0, 0, False, GearPlane)\nGear = MyPart.AddExtrudeBoss(&quot;Gear&quot;, ProfileSketch, Thickness, False)\nprint &quot;Done&quot;"},"alibre-script-library-examples/Utilities/File-Copier":{"slug":"alibre-script-library-examples/Utilities/File-Copier","filePath":"alibre-script-library-examples/Utilities/File Copier.md","title":"File Copier","links":[],"tags":[],"content":"# File Copier script\n# Demonstrates copying a set of parts and assemblies\n# For use with Alibre Design\nimport fnmatch\nimport os\nfrom os.path import expanduser\nWin = Windows()\nScriptName = &#039;File Copier&#039;\nCopyTypes = [&#039;Only parts&#039;, &#039;Assemblies, sub-assemblies and parts in assemblies&#039;]\nOptions = []\nOptions.append([&#039;Source folder&#039;, WindowsInputTypes.Folder, expanduser(&#039;~&#039;), &#039;Choose the folder containing the items to copy&#039;])\nOptions.append([&#039;Destination folder&#039;, WindowsInputTypes.Folder, expanduser(&#039;~&#039;), &#039;Choose the folder to place the copies&#039;])\nOptions.append([&#039;Copy&#039;, WindowsInputTypes.StringList, CopyTypes, CopyTypes[0]])\nValues = Win.OptionsDialog(ScriptName, Options, 300)\nif Values == None:\n  sys.exit()\n# get the inputs\nSourceFolder = Values[0]\nDestinationFolder = Values[1]\nCopyType = Values[2]\n# validate\nif not SourceFolder:\n  Win.ErrorDialog(&#039;No source folder selected&#039;, ScriptName)\n  sys.exit();\nif os.path.isdir(SourceFolder) == False:\n  Win.ErrorDialog(&#039;Source folder does not exist&#039;, ScriptName)\n  sys.exit();\nif not DestinationFolder:\n  Win.ErrorDialog(&#039;No destination folder selected&#039;, ScriptName)\n  sys.exit();\nif os.path.isdir(DestinationFolder) == False:\n  Win.ErrorDialog(&#039;Destination folder does not exist&#039;, ScriptName)\n  sys.exit();\nif CopyType == 0:\n  print &quot;Searching for parts...&quot;\nelse:\n  print &quot;Searching for assemblies...&quot;\n# create empty lists\nParts = []\nAssemblies = []\n# perform the search\nfor Root, Dirnames, Filenames in os.walk(SourceFolder):\n  if CopyType == 0:\n    for Filename in fnmatch.filter(Filenames, &#039;*.AD_PRT&#039;):\n      Parts.append(os.path.join(Root, Filename))\n  else:\n    for Filename in fnmatch.filter(Filenames, &#039;*.AD_ASM&#039;):\n      Assemblies.append(os.path.join(Root, Filename))\n# if no parts or assemblies found...\nif len(Parts) == 0 and len(Assemblies) == 0:\n  Win.ErrorDialog(&#039;No parts or assemblies found&#039;, ScriptName)\n  sys.exit();\n# copy each part\nfor PartFileName in Parts:\n  print &quot;Copying {0}...&quot;.format(PartFileName)\n  Folder = os.path.dirname(os.path.abspath(PartFileName))\n  FileName = os.path.basename(PartFileName)\n  FileNameNoExt, Ext = os.path.splitext(FileName)\n  OutputFileName = DestinationFolder + &#039;\\\\&#039; + FileName\n  # open, save, close\n  P = Part(Folder, FileName)\n  P.SaveAs(DestinationFolder, FileNameNoExt)\n  P.Close()\n  print &quot;  -&gt; {0}&quot;.format(OutputFileName)\n# copy each assembly\nfor AssemblyFileName in Assemblies:\n  print &quot;Copying {0}...&quot;.format(AssemblyFileName)\n  # open, save, close\n  Folder = os.path.dirname(os.path.abspath(AssemblyFileName))\n  FileName = os.path.basename(AssemblyFileName)\n  OutputFileName = DestinationFolder + &#039;\\\\&#039; + FileName\n  A = Assembly(Folder, Filename)\n  A.SaveAll(DestinationFolder)\n  A.Close()\n  print &quot;  -&gt; {0}&quot;.format(OutputFileName)\nif CopyType == 0:\n  Win.InfoDialog(&#039;Copied {0} part{1}&#039;.format(len(Parts), &#039;&#039; if len(Parts) == 1 else &#039;s&#039;), ScriptName)\nelse:\n  Win.InfoDialog(&#039;Copied {0} assembl{1}&#039;.format(len(Assemblies), &#039;y&#039; if len(Assemblies) == 1 else &#039;ies&#039;), ScriptName)"},"alibre-script-library-examples/Utilities/Image-to-Python":{"slug":"alibre-script-library-examples/Utilities/Image-to-Python","filePath":"alibre-script-library-examples/Utilities/Image to Python.md","title":"Image to Python","links":[],"tags":[],"content":"# Image to Python Converter\n# (c) Alibre, LLC 2019, All Rights Reserved\n# Version 1.00\nfrom array import array\nimport os\nWin = Windows()\nScriptName = &quot;Image to Python Converter&quot;\nOptions = []\nOptions.append([&#039;Image&#039;, WindowsInputTypes.File, None, &#039;Choose an image&#039;, &#039;PNG Files|*.png|JPEG Files|*.jpg|Bitmap Files|*.bmp|All Files|*.*&#039;])\nOptions.append([&#039;Python Output&#039;, WindowsInputTypes.SaveFile, None, &#039;Python File to Generate&#039;, &#039;Python Files|*.py|All Files|*.*&#039;, &#039;.py&#039;])\nValues = Win.OptionsDialog(ScriptName, Options)\nif Values == None:\n  sys.exit()\nImageFile = Values[0]\nOutputFile = Values[1]\n# get some details about the image file\nImageSize = os.path.getsize(ImageFile)\nImageName = os.path.splitext(os.path.basename(ImageFile))[0]\nImageName = &quot;Img_&quot; + ImageName.Replace(&#039; &#039;, &#039;_&#039;)\n# load image into binary array\ndata = array(&#039;B&#039;)\nwith open(ImageFile, &#039;rb&#039;) as f:\n    data.fromfile(f, ImageSize)\nOut = open(OutputFile, &#039;w&#039;)\nOut.write(&#039;%s = [\\n&#039; % ImageName)\nLine = &#039;&#039;\nOffset = 0\nfor b in range(0, ImageSize):\n  Line += &#039;0x%2.2X, &#039; % data[b]\n  Offset += 1\n  if Offset % 20 == 0:\n    Out.write(&#039;  &#039; + Line + &#039;\\n&#039;)\n    Line = &#039;&#039;\nif len(Line) &gt; 0: Out.write(&#039;  &#039; + Line)\nOut.write(&#039;]\\n&#039;)\nOut.close()\nWin.InfoDialog(&#039;Python file generated&#039;, ScriptName)"},"alibre-script-library-examples/Utilities/Pattern-Along":{"slug":"alibre-script-library-examples/Utilities/Pattern-Along","filePath":"alibre-script-library-examples/Utilities/Pattern Along.md","title":"Pattern Along","links":[],"tags":[],"content":"# Pattern Along script\n# Demonstrates copying a sketch along a bspline\n# For use with Alibre Design\nfrom __future__ import division\nfrom math import sqrt\nScriptName = &#039;Pattern Along&#039;\n# adds a copy of a sketch to a specific point and normal\ndef AddPattern(CurrentPart, Point, Normal, SourceSketch):\n  Pl = CurrentPart.AddPlane(&#039;Sk&#039;, Normal, Point)\n  PlSk = CurrentPart.AddSketch(&#039;PlSk&#039;, Pl)\n  SkPoint = PlSk.GlobaltoPoint(Point[0], Point[1], Point[2])\n  PlSk.CopyFrom(SourceSketch, 0, 0, 0, SkPoint[0], SkPoint[1], 0, 0, 100.0)\n  Pl.Hide()\nWin = Windows()\n# define options to show in dialog window\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;PatternAlong.png&#039;, 170])\nOptions.append([&#039;Path 3D Sketch&#039;, WindowsInputTypes.Sketch3D, None])\nOptions.append([&#039;Pattern 2D Sketch&#039;, WindowsInputTypes.Sketch, None])\nOptions.append([&#039;Number of Patterns&#039;, WindowsInputTypes.Integer, 10])\nOptions.append([&#039;Add Pattern to Start&#039;, WindowsInputTypes.Boolean, False])\nOptions.append([&#039;Add Pattern to End&#039;, WindowsInputTypes.Boolean, False])\n# show dialog to user, get inputs\nValues = Win.OptionsDialog(ScriptName, Options, 170)\nif Values == None:\n  sys.exit()\n# get the inputs\nPathSketch = Values[1]\nPatternSketch = Values[2]\nNumPatterns = Values[3]\nAddtoStart = Values[4]\nAddtoEnd = Values[5]\n# validate\nif PathSketch == None:\n  Win.ErrorDialog(&#039;No path sketch selected&#039;, ScriptName)\n  sys.exit()\nif PatternSketch == None:\n  Win.ErrorDialog(&#039;No pattern sketch selected&#039;, ScriptName)\n  sys.exit()\nif NumPatterns &lt; 1:\n  Win.ErrorDialog(&#039;Invalid number of patterns&#039;, ScriptName)\n  sys.exit()\nNumSegments = NumPatterns + 1\n# get the part to use\nPrt = PathSketch.GetPart()\n# get the bspline from the sketch\nSpl = None\nfor Figure in PathSketch.Figures:\n  if isinstance(Figure, Bspline3D):\n    Spl = Figure\n# check  bspline was found\nif Spl == None:\n  Win.ErrorDialog(&#039;No Bspline found in the path sketch&#039;, ScriptName)\n  sys.exit()\nprint &#039;Calculating...&#039;\n# divide the bspline up into segments and get the point between the\n# segments and the normal at each point\nSubPt = Spl.SubdivideGetNormals(NumSegments)\n# extract points and normals and create sketch copies\nit = iter(SubPt)\nfor Pt in it:\n  Point = [Pt, next(it), next(it)]\n  Normal = [next(it), next(it), next(it)]\n  AddPattern(Prt, Point, Normal, PatternSketch)\n# add copy of sketch to start of bspline\nif AddtoStart == True:\n  Point = Spl.GetPointAt(0.0)\n  Normal = Spl.GetNormalAt(0.0)\n  AddPattern(Prt, Point, Normal, PatternSketch)\n# add copy of sketch to end of bspline\nif AddtoEnd == True:\n  Point = Spl.GetPointAt(1.0)\n  Normal = Spl.GetNormalAt(1.0)\n  AddPattern(Prt, Point, Normal, PatternSketch)"},"alibre-script-library-examples/Utilities/Sketch-Copier":{"slug":"alibre-script-library-examples/Utilities/Sketch-Copier","filePath":"alibre-script-library-examples/Utilities/Sketch Copier.md","title":"Sketch Copier","links":[],"tags":[],"content":"# sketch copier\n# Demonstrates copying a sketch inside a part\nWin = Windows()\nScriptName = &#039;Sketch Copier&#039;\n# create dialog window and show to user\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;SketchCopier.png&#039;, 170])\nOptions.append([&#039;Source Sketch&#039;, WindowsInputTypes.Sketch, None])\nOptions.append([&#039;Destination Plane&#039;, WindowsInputTypes.Plane, None])\nValues = Win.OptionsDialog(ScriptName, Options, 170)\nif Values == None:\n  sys.exit()\n# get user inputs\nSourceSketch = Values[1]\nDestPlane = Values[2]\nMyPart = CurrentPart()\nDestSketch = MyPart.AddSketch(&quot;Copy of &quot; + SourceSketch.Name, DestPlane)\nDestSketch.CopyFrom(SourceSketch)"},"alibre-script-library-examples/Woodworking/Joint-Creator":{"slug":"alibre-script-library-examples/Woodworking/Joint-Creator","filePath":"alibre-script-library-examples/Woodworking/Joint Creator.md","title":"Joint Creator","links":[],"tags":[],"content":"# Joint Creator\n# (c) Alibre, LLC 2019, All Rights Reserved\n# Version 1.00\nfrom __future__ import division\nfrom math import *\n# gets locaton of edge in a part coordinate system\n# returns a list of two points defining the edge\ndef GetPartEdge(Prt, SharedEdge):\n  Point1 = Prt.AssemblyPointtoPartPoint(SharedEdge[0])\n  Point2 = Prt.AssemblyPointtoPartPoint(SharedEdge[1])\n  return [Point1, Point2]\n# compares two points [X1, Y1, Z1] and [X2, Y2, Z2]\n# returns true if they are the same\ndef PointsAreEqual(P1, P2):\n  if (round(P1[0], 6) == round(P2[0], 6) and\n      round(P1[1], 6) == round(P2[1], 6) and\n      round(P1[2], 6) == round(P2[2], 6)):\n    return True\n  else:\n    return False\n# gets part faces that use an edge\n# returns a list of faces\ndef GetFacesFromEdge(Prt, SharedEdge):\n  Faces = []\n  PartEdge = GetPartEdge(Prt, SharedEdge)\n  for Fce in Prt.Faces:\n    for Edg in Fce.GetEdges():\n      EdgeVertices = Edg.GetVertices()\n      V1 = [EdgeVertices[0].X, EdgeVertices[0].Y, EdgeVertices[0].Z]\n      V2 = [EdgeVertices[1].X, EdgeVertices[1].Y, EdgeVertices[1].Z]\n      if ((PointsAreEqual(V1, PartEdge[0]) and PointsAreEqual(V2, PartEdge[1])) or\n          (PointsAreEqual(V2, PartEdge[0]) and PointsAreEqual(V1, PartEdge[1]))):\n         Faces.append(Fce)\n  return Faces\n# gets an edge that is shared between two parts\n# returns list of edge vertices\ndef GetSharedEdge(Prt1, Prt2):  \n  CornerVertices = []\n  for TabVert in Prt1.GetAssemblyVertices():\n    for BaseVert in Prt2.GetAssemblyVertices():\n      if PointsAreEqual(TabVert, BaseVert):\n        CornerVertices.append(TabVert)\n  return CornerVertices\n# gets the length of an edge\n# returns edge length\ndef GetEdgeLength(Vert1, Vert2):\n  a = abs(Vert2[0] - Vert1[0])\n  b = abs(Vert2[1] - Vert1[1])\n  c = abs(Vert2[2] - Vert1[2])\n  return sqrt(a * a + b * b + c * c)\n# gets the largest face from a set of faces\ndef GetLargestFace(Faces):\n  if Faces[0].GetArea() &gt; Faces[1].GetArea():\n    return Faces[0]\n  elif Faces[1].GetArea() &gt; Faces[0].GetArea():\n    return Faces[1]\n  else:\n    print &quot;Unable to determine face of part.&quot;\n    sys.exit()\n# gets the smallest face from a set of faces\ndef GetSmallestFace(Faces):\n  if Faces[0].GetArea() &lt; Faces[1].GetArea():\n    return Faces[0]\n  elif Faces[1].GetArea() &lt; Faces[0].GetArea():\n    return Faces[1]\n  else:\n    print &quot;Unable to determine face of part.&quot;\n    sys.exit()\n# generates a range of real values from start to stop\n# incremented by step\ndef frange(start, stop, step):\n  i = start\n  if start &lt; stop:\n    while i &lt; stop:\n      yield i\n      i += step\n  else:\n    while i &gt; stop:\n      yield i\n      i += step\n# gets the shortest edge of a face\n# returns shortest edge\ndef GetShortestEdge(Fce):\n  Shortest = Fce.GetEdges()[0]\n  for E in Fce.GetEdges():\n    if E.Length &lt; Shortest.Length:\n      Shortest = E\n  return Shortest\n# generates pin offsets\n# NumPins = number of pins\n# EdgeLength = length of edge for pins\n# PinSense = True = slot at edge, False = pin at edge\n# EdgeOffset = distance from ends of edges before pins\n# Gap = distance between slot and pin\n# returns: [ [Pin_1_Start, Pin_1_End], ..., [Pin_n_Start, Pin_n_End] ]\ndef GeneratePinOffsets(NumPins, EdgeLength, PinSense, EdgeOffset, Gap):\n  Offsets = []\n  # reduce length of edge by the edge offset at each end\n  # giving a length that we generate pins and slots over\n  PinEdgeLength = EdgeLength - (EdgeOffset * 2)\n  # get length of each pin\n  if PinSense == False:\n    PinLength = PinEdgeLength / (NumPins + (NumPins - 1))\n    PinState = True\n  else:\n    PinLength = PinEdgeLength / (NumPins + (NumPins + 1))\n    PinState = False\n  # generate start and end point of each pin\n  CurrentPin = 0\n  for Y in frange(EdgeOffset, EdgeLength - EdgeOffset, PinLength):\n    if PinState:\n      # if pins are never at the edges then always use gap on each\n      # side of pin\n      if PinSense == True:\n        Offsets.append([Y - Gap, Y + PinLength + Gap])\n      # pins could be at edges where we don&#039;t want the gap to be applied\n      else:\n        if CurrentPin == 0:\n          # first pin, no gap at start\n          Offsets.append([Y, Y + PinLength + Gap])\n        elif CurrentPin == NumPins - 1:\n          # last pin, no gap at end\n          Offsets.append([Y - Gap, Y + PinLength])\n        else:\n          # middle pin, gap at start and end\n          Offsets.append([Y - Gap, Y + PinLength + Gap])\n      CurrentPin += 1\n    PinState = not PinState\n  return Offsets\n# generates slot offsets\n# NumPins = number of pins\n# EdgeLength = length of edge for slots\n# PinSense = True = slot at edge, False = pin at edge\n# EdgeOffset = distance from ends of edges before pins\n# Gap = distance between slot and pin\n# returns: [ [Slot_1_Start, Slot_1_End], ..., [Slot_n_Start, Slot_n_End] ]\ndef GenerateSlotOffsets(NumPins, EdgeLength, PinSense, EdgeOffset, Gap):\n  Offsets = []\n  # reduce length of edge by the edge offset at each end\n  # giving a length that we generate pins and slots over\n  PinEdgeLength = EdgeLength - (EdgeOffset * 2)\n  # get length of each pin\n  if PinSense == False:\n    PinLength = PinEdgeLength / (NumPins + (NumPins - 1))\n    PinState = False\n  else:\n    PinLength = PinEdgeLength / (NumPins + (NumPins + 1))\n    PinState = True\n  if PinSense == True:\n    NumSlots = NumPins + 1\n  else:\n    NumSlots = NumPins - 1\n  # add initial slot for edge offset if pins are on outside of slots\n  if EdgeOffset &gt; 0 and PinSense == False:\n    Offsets.append([0, EdgeOffset + (Gap * 2.0)])\n  # generate start and end point of each slot\n  CurrentSlot = 0\n  for Y in frange(EdgeOffset, EdgeLength - EdgeOffset, PinLength):\n    if PinState:\n      # if slots are never at the edges then always use gap on each\n      # side of slot\n      if PinSense == False or (EdgeOffset &gt; 0):\n        Offsets.append([Y - Gap, Y + PinLength + Gap])\n      # slots could be at edges where we don&#039;t want the gap to be applied\n      else:\n        if CurrentSlot == 0:\n          # first slot, no gap at start\n          Offsets.append([Y, Y + PinLength + Gap])\n        elif CurrentSlot == NumSlots - 1:\n          # last slot, no gap at end\n          Offsets.append([Y - Gap, Y + PinLength])\n        else:\n          # middle pin, gap at start and end\n          Offsets.append([Y - Gap, Y + PinLength + Gap])\n      CurrentSlot += 1\n    PinState = not PinState\n  # add final slot for edge offset if pins are on outside of slots\n  if EdgeOffset &gt; 0 and PinSense == False:\n    Offsets.append([EdgeLength - EdgeOffset - (Gap * 2.0), EdgeLength])\n  if EdgeOffset &gt; 0 and PinSense == True:\n    # extend first slot to cover edge offset\n    Offsets[0][0] = 0\n    # extend last slot to cover edge offset\n    Offsets[len(Offsets) - 1][1] = EdgeLength\n  return Offsets\n# generates the pins\n# Prt = part to create pins on\n# Fce = face on part to create pins\n# PinOffsets = start and end values for pins\n# Thickness = depth of pins\n# SharedEdge = edge to generate pins along\ndef GeneratePins(Prt, Fce, PinOffsets, Thickness, SharedEdge):\n  TabProfile = Prt.AddSketch(&#039;Pin Profile&#039;, Fce)\n  TabEdge = GetPartEdge(Prt, SharedEdge)\n  TabProfile.StartFaceMapping(TabEdge[0], TabEdge[1])\n  for PinOffset in PinOffsets:\n    TabProfile.AddRectangle(PinOffset[0], 0, PinOffset[1], Thickness, False)\n  TabProfile.StopFaceMapping()\n  # cut out rectangles (pins)\n  Prt.AddExtrudeCut(&#039;Pins&#039;, TabProfile, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, False)\n# generates the slots\n# Prt = part to create slots on\n# Fce = face on part to create slots\n# SlotOffsets = start and end values for slots\n# Thickness = depth of slots\n# SharedEdge = edge to generate slots along\ndef GenerateSlots(Prt, Fce, SlotOffsets, Thickness, SharedEdge):\n  BaseProfile = Prt.AddSketch(&#039;Slot Profile&#039;, Fce)\n  BaseEdge = GetPartEdge(Prt, SharedEdge)\n  BaseProfile.StartFaceMapping(BaseEdge[0], BaseEdge[1])\n  for SlotOffset in SlotOffsets:\n    BaseProfile.AddRectangle(SlotOffset[0], 0, SlotOffset[1], Thickness, False)\n  BaseProfile.StopFaceMapping()\n  # cut out rectangles (slots)\n  Prt.AddExtrudeCut(&#039;Slots&#039;, BaseProfile, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, False)\n# creates a joint based on user inputs\ndef CreateJoint(Values):\n  TabPart      = Values[1]\n  BasePart     = Values[2]\n  NumberofPins = Values[3]\n  PinSense     = Values[4]\n  EdgeOffset   = Values[5]\n  Gap          = Values[6]\n  print &quot;Gathering information...&quot;\n  # get edge shared by both parts\n  SharedEdge = GetSharedEdge(TabPart, BasePart)\n  # get the part faces for the shared edge\n  TabFaces = GetFacesFromEdge(TabPart, SharedEdge)\n  BaseFaces = GetFacesFromEdge(BasePart, SharedEdge)\n  # get the largest faces on each part that use the shared edge\n  TabFace = GetLargestFace(TabFaces)\n  BaseFace = GetLargestFace(BaseFaces)\n  # the smallest faces on each part that use the shared edge\n  TabEndFace = GetSmallestFace(TabFaces)\n  BaseEndFace = GetSmallestFace(BaseFaces)\n  # get length of shared edge\n  SharedEdgeLength = GetEdgeLength(SharedEdge[0], SharedEdge[1])\n  # get thickness of each part\n  TabThickness = GetShortestEdge(TabEndFace).Length\n  BaseThickness = GetShortestEdge(BaseEndFace).Length\n  print &quot;Calculating...&quot;\n  # generate pin and slot offsets\n  PinOffsets = GeneratePinOffsets(NumberofPins, SharedEdgeLength, PinSense, EdgeOffset, Gap / 2.0)\n  SlotOffsets = GenerateSlotOffsets(NumberofPins, SharedEdgeLength, PinSense, EdgeOffset, Gap / 2.0)\n  print &quot;Generating...&quot;\n  # generate pins and slots\n  GeneratePins(TabPart, TabFace, PinOffsets, BaseThickness, SharedEdge)\n  GenerateSlots(BasePart, BaseFace, SlotOffsets, TabThickness, SharedEdge)\n  print &quot;Finished&quot;\n#################################################################################################\n# check minimum requirements\nif AlibreScriptVersion &lt; 1110:\n  sys.exit(&#039;Please upgrade your copy of Alibre Design to use this script&#039;)\nScriptName = &#039;Joint Creator&#039;\nWin = Windows()\n# define options to show in dialog window\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;JointCreatorIcon.png&#039;, 200])\nOptions.append([&#039;Tab Part&#039;, WindowsInputTypes.Part, None])\nOptions.append([&#039;Base Part&#039;, WindowsInputTypes.Part, None])\nOptions.append([&#039;Number of Pins&#039;, WindowsInputTypes.Integer, 5])\nOptions.append([&#039;Pins on Inside&#039;, WindowsInputTypes.Boolean, False])\nOptions.append([&#039;Offset From Ends&#039;, WindowsInputTypes.Real, 0.0])\nOptions.append([&#039;Gap Between Pins and Slots&#039;, WindowsInputTypes.Real, 0.0])\n# show utility window\nWin.UtilityDialog(ScriptName, &#039;Create Joint&#039;, CreateJoint, None, Options, 200)"},"alibre-script-library-examples/Woodworking/Pocket-Hole-Creator":{"slug":"alibre-script-library-examples/Woodworking/Pocket-Hole-Creator","filePath":"alibre-script-library-examples/Woodworking/Pocket Hole Creator.md","title":"Pocket Hole Creator","links":[],"tags":[],"content":"# Pocket Hole Creator\n# (c) Alibre, LLC 2019, All Rights Reserved\n# Version 1.00\nfrom __future__ import division\nfrom math import *\n# compares two points [X1, Y1, Z1] and [X2, Y2, Z2]\n# returns true if they are the same\ndef PointsAreEqual(P1, P2):\n  if (round(P1[0], 6) == round(P2[0], 6) and\n      round(P1[1], 6) == round(P2[1], 6) and\n      round(P1[2], 6) == round(P2[2], 6)):\n    return True\n  else:\n    return False\n# gets part faces that use an edge\n# returns a list of faces\ndef GetFacesFromEdge(Prt, Ege):\n  Faces = []\n  PartEdge = [[Ege.Vertices[0].X, Ege.Vertices[0].Y, Ege.Vertices[0].Z], [Ege.Vertices[1].X, Ege.Vertices[1].Y, Ege.Vertices[1].Z]]\n  for Fce in Prt.Faces:\n    for Edg in Fce.GetEdges():\n      EdgeVertices = Edg.GetVertices()\n      V1 = [EdgeVertices[0].X, EdgeVertices[0].Y, EdgeVertices[0].Z]\n      V2 = [EdgeVertices[1].X, EdgeVertices[1].Y, EdgeVertices[1].Z]\n      if ((PointsAreEqual(V1, PartEdge[0]) and PointsAreEqual(V2, PartEdge[1])) or\n          (PointsAreEqual(V2, PartEdge[0]) and PointsAreEqual(V1, PartEdge[1]))):\n         Faces.append(Fce)\n  return Faces\n# given a part, face and edge of the face this returns the other face\n# that shares the same edge\ndef GetOtherFace(Prt, Edg, TopFace):\n  Fces = GetFacesFromEdge(Prt, Edg)\n  for EgeFace in Fces:\n    if EgeFace.Name != TopFace.Name:\n      return EgeFace\n  return None\n# creates a pocket hole\ndef CreatePocketHole(Values):\n  # TargetEdge = edge that the pocket hole is on\n  # Fce = face where the pocket is inserted\n  # DistanceFromEdge = distance from the edge of the face for the packet\n  # Depth = distance from pocket to drill hole\n  # Diameter = diameter of packet\n  # DrillDiameter = diameter of drill hole\n  # Angle = angle of pocket\n  TargetEdge       = Values[1]\n  Fce              = Values[2]\n  DistanceFromEdge = Values[3]\n  Depth            = Values[4]\n  Diameter         = Values[5]\n  DrillDiameter    = Values[6]\n  Angle            = Values[7]\n  Prt = Fce.GetPart()\n  # get face that has exit hole\n  ExitFace = GetOtherFace(Prt, TargetEdge, Fce)\n  # get thickness of part (height of face with exit hole)\n  ExitFaceEdges = ExitFace.GetEdges()\n  Thickness = 0\n  for ExEdg in ExitFaceEdges:\n    if ExEdg.Length &gt; 0:\n      if ExEdg.Length != TargetEdge.Length:\n        Thickness = ExEdg.Length\n  if Thickness == 0:\n    print &quot;Unable to get thickness of part&quot;\n    sys.exit()\n  # get location of center of exit hole\n  ExitHoleCenterX = TargetEdge.Length - DistanceFromEdge\n  ExitHoleCenterY = Thickness / 2.0\n  # get location of exit hole center in 3D coordinates\n  ExitSk = Prt.AddSketch(&#039;Exit Sk&#039;, ExitFace)\n  ExitSk.StartFaceMapping(TargetEdge.Vertices[0], TargetEdge.Vertices[1])\n  ExitPt = ExitSk.AddPoint(ExitHoleCenterX, ExitHoleCenterY, False)\n  ExitSk.StopFaceMapping()\n  ExitPtGlobal = ExitSk.PointtoGlobal(ExitSk.Figures[0].X, ExitSk.Figures[0].Y)\n  Prt.RemoveSketch(ExitSk)\n  # create exit point\n  ExitPoint = Prt.AddPoint(&#039;Exit&#039;, ExitPtGlobal[0], ExitPtGlobal[1], ExitPtGlobal[2])\n  # get location of entry hole in 2D\n  EntryHoleCenterX = DistanceFromEdge\n  EntryHoleCenterY = (Thickness / 2.0) / tan(radians(Angle))\n  # get location of entry hole center in 3D coordinates\n  EntrySk = Prt.AddSketch(&#039;Entry Sk&#039;, Fce)\n  EntrySk.StartFaceMapping(TargetEdge.Vertices[0], TargetEdge.Vertices[1])\n  EntryPt = EntrySk.AddPoint(EntryHoleCenterX, EntryHoleCenterY, False)\n  EntrySk.StopFaceMapping()\n  EntryPtGlobal = EntrySk.PointtoGlobal(EntrySk.Figures[0].X, EntrySk.Figures[0].Y)\n  Prt.RemoveSketch(EntrySk)\n  # create entry point\n  EntryPoint = Prt.AddPoint(&#039;Entry&#039;, EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  # create axis from entry to exit point\n  PocketAxis = Prt.AddAxis(&#039;Pocket Axis&#039;, EntryPoint.GetCoordinates(), ExitPoint.GetCoordinates())\n  # create plane perpendicular to axis on the start point\n  nx = ExitPtGlobal[0] - EntryPtGlobal[0]\n  ny = ExitPtGlobal[1] - EntryPtGlobal[1]\n  nz = ExitPtGlobal[2] - EntryPtGlobal[2]\n  EntryPlane = Prt.AddPlane(&#039;Entry Plane&#039;, [nx, ny, nz], EntryPoint.GetCoordinates())\n  # get drill distances\n  EntrytoExitDistance = (Thickness / 2.0) / sin(radians(Angle))\n  Drill1Distance = EntrytoExitDistance - Depth\n  # first drill\n  Drill1Sk = Prt.AddSketch(&#039;Drill 1&#039;, EntryPlane)\n  DrillCenter = Drill1Sk.GlobaltoPoint(EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  Drill1Sk.AddCircle(DrillCenter[0], DrillCenter[1], Diameter, False)\n  Prt.AddExtrudeCut(&#039;Drill 1&#039;, Drill1Sk, Drill1Distance * 2, False, Part.EndCondition.MidPlane, None, 0, Part.DirectionType.Normal, None, 0, 0)\n  # second drill\n  Drill2Sk = Prt.AddSketch(&#039;Drill 2&#039;, EntryPlane)\n  DrillCenter = Drill2Sk.GlobaltoPoint(EntryPtGlobal[0], EntryPtGlobal[1], EntryPtGlobal[2])\n  Drill2Sk.AddCircle(DrillCenter[0], DrillCenter[1], DrillDiameter, False)\n  Prt.AddExtrudeCut(&#039;Drill 2&#039;, Drill2Sk, 0, False, Part.EndCondition.ThroughAll, None, 0, Part.DirectionType.Normal, None, 0, 0)\n  # clean up\n  EntryPoint.Hide()\n  ExitPoint.Hide()\n  PocketAxis.Hide()\n  EntryPlane.Hide()\n###########################################################################################\n# check minimum requirements\nif AlibreScriptVersion &lt; 1110:\n  sys.exit(&#039;Please upgrade your copy of Alibre Design to use this script&#039;)\nScriptName = &#039;Pocket Hole Creator&#039;\nWin = Windows()\n# define options to show in dialog window\nOptions = []\nOptions.append([None, WindowsInputTypes.Image, &#039;PocketHoleCreatorIcon.png&#039;, 200])\nOptions.append([&#039;Edge&#039;, WindowsInputTypes.Edge, None])\nOptions.append([&#039;Face&#039;, WindowsInputTypes.Face, None])\nOptions.append([&#039;Distance From Edge&#039;, WindowsInputTypes.Real, 20.0])\nOptions.append([&#039;Depth&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Diameter&#039;, WindowsInputTypes.Real, 10.0])\nOptions.append([&#039;Drill Diameter&#039;, WindowsInputTypes.Real, 4.0])\nOptions.append([&#039;Angle&#039;, WindowsInputTypes.Real, 15.0])\n# show utility window\nWin.UtilityDialog(ScriptName, &#039;Create Pocket Hole&#039;, CreatePocketHole, None, Options, 200)"},"index":{"slug":"index","filePath":"index.md","title":"index","links":["Alibre-Script-Code-Assistant/001","Alibre-Script-Code-Assistant/002","Alibre-Script-Code-Assistant/003","Alibre-Script-Code-Assistant/004","Alibre-Script-Code-Assistant/005","Alibre-Script-Code-Assistant/006","Alibre-Script-Code-Assistant/007","Alibre-Script-Code-Assistant/008","Alibre-Script-Code-Assistant/009","Alibre-Script-Code-Assistant/010","Alibre-Script-Code-Assistant/011","Alibre-Script-Code-Assistant/012","Alibre-Script-Code-Assistant/013","Alibre-Script-Code-Assistant/014","Alibre-Script-Code-Assistant/README","alibre-script-examples/Alibre-Script-Examples.code-workspace","alibre-script-examples/Assembly-Constraints","alibre-script-examples/Bolt-Creator","alibre-script-examples/Calculating-Length-of-Curves","alibre-script-examples/Cap-Screw-ISO-4762-Bolts","alibre-script-examples/Copy-sketch","alibre-script-examples/Create-and-Modify-Global-Parameters","alibre-script-examples/Create-Reference-Planes-Axes-and-Points","alibre-script-examples/Creating-a-3D-Sketch-with-a-Spline-and-an-Arc","alibre-script-examples/Creating-a-Cylinder-Between-Two-Points","alibre-script-examples/Creating-and-Manipulating-Assemblies","alibre-script-examples/Custom-Values-and-Settings-Window","alibre-script-examples/Default-Reference-Geometry","alibre-script-examples/Drop-Down-Lists","alibre-script-examples/Everyone-Loves-a-Slinky","alibre-script-examples/Gear-Example","alibre-script-examples/Geodesic-Dome-Reference-Geometry","alibre-script-examples/Getting-User-Input","alibre-script-examples/Helical-spring","alibre-script-examples/Import-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline","alibre-script-examples/Importing-Files","alibre-script-examples/Joint-Creator","alibre-script-examples/List-All-Parts-in-an-Assembly-and-Sub-Assemblies","alibre-script-examples/Lofting-with-a-Guide-Curve","alibre-script-examples/Midplane-Extrusion","alibre-script-examples/Mobius-Strip","alibre-script-examples/Modify-an-Existing-Part","alibre-script-examples/Parameters-with-Units","alibre-script-examples/Pocket-Hole-Creator","alibre-script-examples/Polygon-Incircle","alibre-script-examples/Profile-and-Sweep-Path","alibre-script-examples/Reading-from-a-Spreadsheet","alibre-script-examples/Rectangular-hollow-formed-profiles","alibre-script-examples/Reference-Geometry","alibre-script-examples/Scaling-a-Sketch","alibre-script-examples/Servo-Cam","alibre-script-examples/Slice-a-Part","alibre-script-examples/Square-hollow-formed-profiles","alibre-script-examples/Supressing-Unsupressing-and-Removing-Features","alibre-script-examples/Tool-Cutting","alibre-script-examples/Triangle","alibre-script-examples/Type-11-flanges-according-to-BS-EN-1092-PN16","alibre-script-examples/Units","alibre-script-examples/Useful-Dialogs","alibre-script-examples/Wave-washer","alibre-script-examples/Working-with-Configurations","alibre-script-library-examples/Import-and-Export/MaxCellSize.jpg","alibre-script-library-examples/Import-and-Export/NormalDeviation.jpg","alibre-script-library-examples/Import-and-Export/Part-Exporter","alibre-script-library-examples/Import-and-Export/STL-Exporter","alibre-script-library-examples/Import-and-Export/SurfaceDeviation.jpg","alibre-script-library-examples/Mathematical/Equation-Sketcher","alibre-script-library-examples/Mathematical/EquationSketcher.png","alibre-script-library-examples/Mechanical/Gear-Generator","alibre-script-library-examples/Mechanical/GearGenerator.png","alibre-script-library-examples/Utilities/File-Copier","alibre-script-library-examples/Utilities/Image-to-Python","alibre-script-library-examples/Utilities/Pattern-Along","alibre-script-library-examples/Utilities/PatternAlong.png","alibre-script-library-examples/Utilities/Sketch-Copier","alibre-script-library-examples/Utilities/SketchCopier.png","alibre-script-library-examples/Woodworking/Joint-Creator","alibre-script-library-examples/Woodworking/JointCreatorIcon.png","alibre-script-library-examples/Woodworking/Pocket-Hole-Creator","alibre-script-library-examples/Woodworking/PocketHoleCreatorIcon.png"],"tags":[],"content":"Repository Index\ngenerated 2025-06-24 23:23:46\n\nAlibre-Script-Code-Assistant/\n\n001.md\n002.md\n003.md\n004.md\n005.md\n006.md\n007.md\n008.md\n009.md\n010.md\n011.md\n012.md\n013.md\n014.md\nREADME.md\n\n\nalibre-script-examples/\n\nAlibre-Script-Examples.code-workspace\nAssembly-Constraints.md\nBolt-Creator.md\nCalculating-Length-of-Curves.md\nCap-Screw-ISO-4762-Bolts.md\nCopy-sketch.md\nCreate-and-Modify-Global-Parameters.md\nCreate-Reference-Planes-Axes-and-Points.md\nCreating-a-3D-Sketch-with-a-Spline-and-an-Arc.md\nCreating-a-Cylinder-Between-Two-Points.md\nCreating-and-Manipulating-Assemblies.md\nCustom-Values-and-Settings-Window.md\nDefault-Reference-Geometry.md\nDrop-Down-Lists.md\nEveryone-Loves-a-Slinky.md\nGear-Example.md\nGeodesic-Dome-Reference-Geometry.md\nGetting-User-Input.md\nHelical-spring.md\nImport-points-from-a-CSV-file-rotate-them-and-connect-into-a-polyline.md\nImporting-Files.md\nJoint-Creator.md\nList-All-Parts-in-an-Assembly-and-Sub-Assemblies.md\nLofting-with-a-Guide-Curve.md\nMidplane-Extrusion.md\nMobius-Strip.md\nModify-an-Existing-Part.md\nParameters-with-Units.md\nPocket-Hole-Creator.md\nPolygon-Incircle.md\nProfile-and-Sweep-Path.md\nReading-from-a-Spreadsheet.md\nRectangular-hollow-formed-profiles.md\nReference-Geometry.md\nScaling-a-Sketch.md\nServo-Cam.md\nSlice-a-Part.md\nSquare-hollow-formed-profiles.md\nSupressing-Unsupressing-and-Removing-Features.md\nTool-Cutting.md\nTriangle.md\nType-11-flanges-according-to-BS-EN-1092-PN16.md\nUnits.md\nUseful-Dialogs.md\nWave-washer.md\nWorking-with-Configurations.md\n\n\nalibre-script-library-examples/\n\nImport and Export/\n\nMaxCellSize.jpg\nNormalDeviation.jpg\nPart Exporter.md\nSTL Exporter.md\nSurfaceDeviation.jpg\n\n\nMathematical/\n\nEquation Sketcher.md\nEquationSketcher.png\n\n\nMechanical/\n\nGear Generator.md\nGearGenerator.png\n\n\nUtilities/\n\nFile Copier.md\nImage to Python.md\nPattern Along.md\nPatternAlong.png\nSketch Copier.md\nSketchCopier.png\n\n\nWoodworking/\n\nJoint Creator.md\nJointCreatorIcon.png\nPocket Hole Creator.md\nPocketHoleCreatorIcon.png\n\n\n\n\n"}}